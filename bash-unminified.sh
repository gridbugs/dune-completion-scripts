#!/usr/bin/env bash
# Completion script for dune. Generated by climate.

_dune_complete() {
  _dune_comp_words_traverse_init
  if [ "$COMP_CWORD" == "0" ]; then
    _dune_error_print "Unexpected \$COMP_CWORD value of 0. $COMP_CWORD should be at least 1 as the shell uses the first word of the command line to determine which completion script to run."
  elif [ "$(_dune_comp_words_count)" -lt 2 ]; then
    _dune_error_print "Unexpected length of \$COMP_WORDS array: ${#COMP_WORDS[@]}. Its length should be at least 2 since the first element should always be the program name, and the second element will be the first word after the program name, which is expected to be the empty string if no additional words have been entered after the program name."
  else
    _dune_comp_words_traverse_advance
    _dune_ "$1" "$2" "$3"
    case "$?" in
      100)
        :
        ;;
      102)
        _dune_error_print "Unexpected error in completion script: Traversed command line beyond the current cursor position"
        ;;
      101)
        _dune_error_print "Unexpected error in completion script: Traversed beyond the end of the command line"
        ;;
      *)
        _dune_error_print "Unknown error in completion script"
        ;;
    esac
  fi
}

_dune_STATUS_DONE=100

_dune_STATUS_ERROR_WORD_OUT_OF_BOUNDS=101

_dune_WORD_INDEX_PAST_CURSOR=102

_dune_status_is_error() {
  [ "$1" -gt "$_dune_STATUS_DONE" ]
}

_dune_error_print() {
  echo "$1" > /dev/stderr
}

_dune_comp_words_count() {
  echo "${#COMP_WORDS[@]}"
}

_dune_comp_words_get_nth() {
  local i=$1
  if [ "$i" -ge "$(_dune_comp_words_count)" ]; then
    return "$_dune_STATUS_ERROR_WORD_OUT_OF_BOUNDS"
  fi
  echo "${COMP_WORDS[$i]}"
}

_dune_COMP_WORDS_CURRENT_INDEX=0

_dune_comp_words_traverse_init() {
  _dune_COMP_WORDS_CURRENT_INDEX=0
}

_dune_comp_words_traverse_get_current() {
  _dune_comp_words_get_nth "$_dune_COMP_WORDS_CURRENT_INDEX"
}

_dune_comp_words_traverse_advance() {
  _dune_COMP_WORDS_CURRENT_INDEX=$((_dune_COMP_WORDS_CURRENT_INDEX + 1))
}

_dune_comp_words_traverse_is_at_cursor() {
  test "$_dune_COMP_WORDS_CURRENT_INDEX" -eq "$COMP_CWORD"
}

_dune_comp_words_traverse_is_past_cursor() {
  test "$_dune_COMP_WORDS_CURRENT_INDEX" -gt "$COMP_CWORD"
}

_dune_add_reply_files() {
  # Takes the word under the cursor (just the portion up to the cursor) and
  # completes with files in the current directory.
  while IFS= read -r line; do
    COMPREPLY+=( "$line" )
  done < <(compgen -A file -- "$1")
  # Tell the shell that completions will be filenames. This allows for
  # ergonomic improvements such as appending a slash to directories and
  # omitting the space after completions so completion of paths can continue
  # if the user presses tab again.
  type compopt &> /dev/null && compopt -o filenames
}

_dune_add_reply_fixed() {
  # Takes the word under the cursor (just the portion up to the cursor) and a
  # space separated list of completion strings.
  COMPREPLY+=($(compgen -W "$2" -- "$1"))
}

_dune_reentrant_query_run() {
  # Takes a reentrant query index and the current word under the cursor (up to
  # the cursor). It invokes the program with the given subcommand path and
  # some special arguments that cause it to emit the result of the requested
  # query. The result is then added to COMPREPLY.
  local query_index="$1" current_word="$2"
  local command="dune --print-reentrant-completion-hints=$query_index -- $COMP_LINE"
  COMPREPLY+=($(compgen -W "$(eval "$command")" -- "$current_word"))
}

_dune_runtest__complete_positional_args() {
  # Takes the portion of the word under the cursor before the cursor and the
  # index of the current positional argument on the command line and adds comp
  # replies for that positional argument begining with that prefix.
  case "$2" in
    *)
      _dune_add_reply_files "$1"
      ;;
  esac
}

_dune_runtest() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      _dune_runtest__complete_positional_args "$2" "$positional_argument_index"
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --manpage --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --debug-cache)
            # completions for: runtest --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: runtest --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: runtest --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: runtest --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: runtest -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: runtest --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: runtest --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: runtest --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: runtest --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: runtest --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: runtest --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: runtest -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: runtest --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: runtest --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: runtest --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: runtest --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: runtest --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: runtest --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: runtest --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: runtest --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: runtest --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: runtest --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: runtest --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: runtest --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: runtest --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: runtest --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: runtest --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --error-reporting)
            # completions for: runtest --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --display-separate-messages | --debug-cache | --watch-exclusions | --instrument-with | --store-orig-source-dir | --trace-extended | --diff-command | -x | --dump-gc-stats | --dump-memo-graph-format | --print-metrics | --force | -f | --workspace | --debug-package-logs | --debug-load-dir | --debug-backtraces | --action-stdout-on-success | --cache-storage-mode | --verbose | --sandbox | -j | --terminal-persistence | --cache | --cache-check-probability | --action-stderr-on-success | --debug-dependency-path | --debug-artifact-substitution | --debug-digests | --no-buffer | --auto-promote | --watch | -w | --dump-memo-graph | --dump-memo-graph-with-timing | --release | --ignore-lock-dir | --promote-install-files | --default-target | --ignore-promoted-rules | --root | --config-file | --always-show-command-line | --require-dune-project-file | --only-packages | --profile | --build-dir | --trace-file | --no-print-directory | --build-info | --file-watcher | --wait-for-filesystem-clock | --error-reporting | --stop-on-first-error | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_test__complete_positional_args() {
  # Takes the portion of the word under the cursor before the cursor and the
  # index of the current positional argument on the command line and adds comp
  # replies for that positional argument begining with that prefix.
  case "$2" in
    *)
      _dune_add_reply_files "$1"
      ;;
  esac
}

_dune_test() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      _dune_test__complete_positional_args "$2" "$positional_argument_index"
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --manpage --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --debug-cache)
            # completions for: test --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: test --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: test --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: test --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: test -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: test --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: test --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: test --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: test --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: test --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: test --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: test -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: test --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: test --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: test --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: test --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: test --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: test --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: test --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: test --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: test --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: test --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: test --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: test --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: test --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: test --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: test --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --error-reporting)
            # completions for: test --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --display-separate-messages | --debug-cache | --watch-exclusions | --instrument-with | --store-orig-source-dir | --trace-extended | --diff-command | -x | --dump-gc-stats | --dump-memo-graph-format | --print-metrics | --force | -f | --workspace | --debug-package-logs | --debug-load-dir | --debug-backtraces | --action-stdout-on-success | --cache-storage-mode | --verbose | --sandbox | -j | --terminal-persistence | --cache | --cache-check-probability | --action-stderr-on-success | --debug-dependency-path | --debug-artifact-substitution | --debug-digests | --no-buffer | --auto-promote | --watch | -w | --dump-memo-graph | --dump-memo-graph-with-timing | --release | --ignore-lock-dir | --promote-install-files | --default-target | --ignore-promoted-rules | --root | --config-file | --always-show-command-line | --require-dune-project-file | --only-packages | --profile | --build-dir | --trace-file | --no-print-directory | --build-info | --file-watcher | --wait-for-filesystem-clock | --error-reporting | --stop-on-first-error | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_installed-libraries() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      # This is where we would add completions for positional arguments,
      # however this command has no positional arguments
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --manpage --na --no-buffer --no-print-directory --not-available --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --debug-cache)
            # completions for: installed-libraries --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: installed-libraries
            # --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: installed-libraries --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: installed-libraries --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: installed-libraries -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: installed-libraries --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: installed-libraries
            # --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: installed-libraries --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: installed-libraries
            # --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: installed-libraries
            # --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: installed-libraries --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: installed-libraries -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: installed-libraries
            # --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: installed-libraries --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: installed-libraries
            # --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: installed-libraries
            # --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: installed-libraries --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: installed-libraries
            # --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: installed-libraries --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: installed-libraries --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: installed-libraries --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: installed-libraries
            # --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: installed-libraries --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: installed-libraries --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: installed-libraries --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: installed-libraries --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: installed-libraries --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --error-reporting)
            # completions for: installed-libraries --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --display-separate-messages | --debug-cache | --watch-exclusions | --instrument-with | --store-orig-source-dir | --trace-extended | --diff-command | -x | --dump-gc-stats | --dump-memo-graph-format | --print-metrics | --force | -f | --workspace | --debug-package-logs | --debug-load-dir | --debug-backtraces | --action-stdout-on-success | --cache-storage-mode | --verbose | --sandbox | -j | --terminal-persistence | --cache | --cache-check-probability | --action-stderr-on-success | --debug-dependency-path | --debug-artifact-substitution | --debug-digests | --no-buffer | --auto-promote | --watch | -w | --dump-memo-graph | --dump-memo-graph-with-timing | --release | --ignore-lock-dir | --promote-install-files | --default-target | --ignore-promoted-rules | --root | --config-file | --always-show-command-line | --require-dune-project-file | --only-packages | --profile | --build-dir | --trace-file | --no-print-directory | --build-info | --file-watcher | --wait-for-filesystem-clock | --error-reporting | --stop-on-first-error | --na | --not-available | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_external-lib-deps__complete_positional_args() {
  # Takes the portion of the word under the cursor before the cursor and the
  # index of the current positional argument on the command line and adds comp
  # replies for that positional argument begining with that prefix.
  case "$2" in
    *)
      _dune_add_reply_files "$1"
      ;;
  esac
}

_dune_external-lib-deps() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      _dune_external-lib-deps__complete_positional_args "$2" "$positional_argument_index"
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --manpage --missing --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --sexp --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --unstable-by-dir --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --error-reporting)
            # completions for: external-lib-deps --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: external-lib-deps --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: external-lib-deps --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: external-lib-deps --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: external-lib-deps --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: external-lib-deps --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: external-lib-deps
            # --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: external-lib-deps --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: external-lib-deps --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: external-lib-deps --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: external-lib-deps
            # --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: external-lib-deps --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: external-lib-deps
            # --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: external-lib-deps
            # --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: external-lib-deps --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: external-lib-deps
            # --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: external-lib-deps -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: external-lib-deps --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: external-lib-deps
            # --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: external-lib-deps
            # --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: external-lib-deps --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: external-lib-deps
            # --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: external-lib-deps --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: external-lib-deps -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: external-lib-deps --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: external-lib-deps --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: external-lib-deps --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --debug-cache)
            # completions for: external-lib-deps --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --unstable-by-dir | --missing | --stop-on-first-error | --error-reporting | --wait-for-filesystem-clock | --file-watcher | --build-info | --no-print-directory | --trace-file | --build-dir | --profile | --only-packages | --require-dune-project-file | --always-show-command-line | --config-file | --root | --ignore-promoted-rules | --default-target | --promote-install-files | --ignore-lock-dir | --release | --dump-memo-graph-with-timing | --dump-memo-graph | --watch | -w | --auto-promote | --no-buffer | --debug-digests | --debug-artifact-substitution | --debug-dependency-path | --action-stderr-on-success | --cache-check-probability | --cache | --terminal-persistence | -j | --sandbox | --verbose | --cache-storage-mode | --action-stdout-on-success | --debug-backtraces | --debug-load-dir | --debug-package-logs | --workspace | --force | -f | --print-metrics | --dump-memo-graph-format | --dump-gc-stats | -x | --diff-command | --trace-extended | --store-orig-source-dir | --instrument-with | --watch-exclusions | --debug-cache | --display-separate-messages | --sexp | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_build__complete_positional_args() {
  # Takes the portion of the word under the cursor before the cursor and the
  # index of the current positional argument on the command line and adds comp
  # replies for that positional argument begining with that prefix.
  case "$2" in
    *)
      _dune_add_reply_files "$1"
      ;;
  esac
}

_dune_build() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      _dune_build__complete_positional_args "$2" "$positional_argument_index"
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --manpage --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --debug-cache)
            # completions for: build --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: build --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: build --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: build --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: build -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: build --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: build --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: build --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: build --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: build --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: build --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: build -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: build --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: build --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: build --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: build --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: build --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: build --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: build --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: build --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: build --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: build --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: build --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: build --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: build --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: build --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: build --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --error-reporting)
            # completions for: build --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --display-separate-messages | --debug-cache | --watch-exclusions | --instrument-with | --store-orig-source-dir | --trace-extended | --diff-command | -x | --dump-gc-stats | --dump-memo-graph-format | --print-metrics | --force | -f | --workspace | --debug-package-logs | --debug-load-dir | --debug-backtraces | --action-stdout-on-success | --cache-storage-mode | --verbose | --sandbox | -j | --terminal-persistence | --cache | --cache-check-probability | --action-stderr-on-success | --debug-dependency-path | --debug-artifact-substitution | --debug-digests | --no-buffer | --auto-promote | --watch | -w | --dump-memo-graph | --dump-memo-graph-with-timing | --release | --ignore-lock-dir | --promote-install-files | --default-target | --ignore-promoted-rules | --root | --config-file | --always-show-command-line | --require-dune-project-file | --only-packages | --profile | --build-dir | --trace-file | --no-print-directory | --build-info | --file-watcher | --wait-for-filesystem-clock | --error-reporting | --stop-on-first-error | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_fmt() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      # This is where we would add completions for positional arguments,
      # however this command has no positional arguments
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --manpage --no-buffer --no-print-directory --only-packages --preview --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --debug-cache)
            # completions for: fmt --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: fmt --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: fmt --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: fmt --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: fmt -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: fmt --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: fmt --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: fmt --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: fmt --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: fmt --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: fmt --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: fmt -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: fmt --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: fmt --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: fmt --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: fmt --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: fmt --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: fmt --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: fmt --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: fmt --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: fmt --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: fmt --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: fmt --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: fmt --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: fmt --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: fmt --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: fmt --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --error-reporting)
            # completions for: fmt --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --display-separate-messages | --debug-cache | --watch-exclusions | --instrument-with | --store-orig-source-dir | --trace-extended | --diff-command | -x | --dump-gc-stats | --dump-memo-graph-format | --print-metrics | --force | -f | --workspace | --debug-package-logs | --debug-load-dir | --debug-backtraces | --action-stdout-on-success | --cache-storage-mode | --verbose | --sandbox | -j | --terminal-persistence | --cache | --cache-check-probability | --action-stderr-on-success | --debug-dependency-path | --debug-artifact-substitution | --debug-digests | --no-buffer | --auto-promote | --watch | -w | --dump-memo-graph | --dump-memo-graph-with-timing | --release | --ignore-lock-dir | --promote-install-files | --default-target | --ignore-promoted-rules | --root | --config-file | --always-show-command-line | --require-dune-project-file | --only-packages | --profile | --build-dir | --trace-file | --no-print-directory | --build-info | --file-watcher | --wait-for-filesystem-clock | --error-reporting | --stop-on-first-error | --preview | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_clean() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      # This is where we would add completions for positional arguments,
      # however this command has no positional arguments
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --manpage --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --error-reporting)
            # completions for: clean --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: clean --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: clean --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: clean --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: clean --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: clean --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: clean --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: clean --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: clean --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: clean --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: clean --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: clean --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: clean --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: clean --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: clean --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: clean --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: clean -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: clean --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: clean --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: clean --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: clean --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: clean --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: clean --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: clean -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: clean --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: clean --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: clean --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --debug-cache)
            # completions for: clean --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --stop-on-first-error | --error-reporting | --wait-for-filesystem-clock | --file-watcher | --build-info | --no-print-directory | --trace-file | --build-dir | --profile | --only-packages | --require-dune-project-file | --always-show-command-line | --config-file | --root | --ignore-promoted-rules | --default-target | --promote-install-files | --ignore-lock-dir | --release | --dump-memo-graph-with-timing | --dump-memo-graph | --watch | -w | --auto-promote | --no-buffer | --debug-digests | --debug-artifact-substitution | --debug-dependency-path | --action-stderr-on-success | --cache-check-probability | --cache | --terminal-persistence | -j | --sandbox | --verbose | --cache-storage-mode | --action-stdout-on-success | --debug-backtraces | --debug-load-dir | --debug-package-logs | --workspace | --force | -f | --print-metrics | --dump-memo-graph-format | --dump-gc-stats | -x | --diff-command | --trace-extended | --store-orig-source-dir | --instrument-with | --watch-exclusions | --debug-cache | --display-separate-messages | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_install__complete_positional_args() {
  # Takes the portion of the word under the cursor before the cursor and the
  # index of the current positional argument on the command line and adds comp
  # replies for that positional argument begining with that prefix.
  case "$2" in
    *)
      _dune_add_reply_files "$1"
      ;;
  esac
}

_dune_install() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      _dune_install__complete_positional_args "$2" "$positional_argument_index"
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --bindir --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --context --create-install-files --datadir --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --destdir --diff-command --display-separate-messages --docdir --dry-run --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --etcdir --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --libdir --libexecdir --mandir --manpage --no-buffer --no-print-directory --only-packages --prefix --print-metrics --profile --promote-install-files --release --relocatable --require-dune-project-file --root --sandbox --sbindir --sections --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --context)
            # completions for: install --context
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --datadir)
            # completions for: install --datadir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --bindir)
            # completions for: install --bindir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --docdir)
            # completions for: install --docdir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --libdir)
            # completions for: install --libdir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --prefix)
            # completions for: install --prefix
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --error-reporting)
            # completions for: install --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: install --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: install --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: install --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: install --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: install --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: install --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: install --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: install --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: install --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: install --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: install --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: install --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: install --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: install --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: install --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: install -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: install --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: install --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: install --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: install --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: install --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: install --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: install -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: install --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: install --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: install --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --debug-cache)
            # completions for: install --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --destdir)
            # completions for: install --destdir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --mandir)
            # completions for: install --mandir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --etcdir)
            # completions for: install --etcdir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sbindir)
            # completions for: install --sbindir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --libexecdir)
            # completions for: install --libexecdir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sections)
            # completions for: install --sections
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --context | --create-install-files | --dry-run | --datadir | --bindir | --docdir | --libdir | --prefix | --stop-on-first-error | --error-reporting | --wait-for-filesystem-clock | --file-watcher | --build-info | --no-print-directory | --trace-file | --build-dir | --profile | --only-packages | --require-dune-project-file | --always-show-command-line | --config-file | --root | --ignore-promoted-rules | --default-target | --promote-install-files | --ignore-lock-dir | --release | --dump-memo-graph-with-timing | --dump-memo-graph | --watch | -w | --auto-promote | --no-buffer | --debug-digests | --debug-artifact-substitution | --debug-dependency-path | --action-stderr-on-success | --cache-check-probability | --cache | --terminal-persistence | -j | --sandbox | --verbose | --cache-storage-mode | --action-stdout-on-success | --debug-backtraces | --debug-load-dir | --debug-package-logs | --workspace | --force | -f | --print-metrics | --dump-memo-graph-format | --dump-gc-stats | -x | --diff-command | --trace-extended | --store-orig-source-dir | --instrument-with | --watch-exclusions | --debug-cache | --display-separate-messages | --destdir | --mandir | --etcdir | --sbindir | --libexecdir | --relocatable | --sections | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_uninstall__complete_positional_args() {
  # Takes the portion of the word under the cursor before the cursor and the
  # index of the current positional argument on the command line and adds comp
  # replies for that positional argument begining with that prefix.
  case "$2" in
    *)
      _dune_add_reply_files "$1"
      ;;
  esac
}

_dune_uninstall() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      _dune_uninstall__complete_positional_args "$2" "$positional_argument_index"
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --bindir --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --context --create-install-files --datadir --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --destdir --diff-command --display-separate-messages --docdir --dry-run --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --etcdir --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --libdir --libexecdir --mandir --manpage --no-buffer --no-print-directory --only-packages --prefix --print-metrics --profile --promote-install-files --release --relocatable --require-dune-project-file --root --sandbox --sbindir --sections --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --context)
            # completions for: uninstall --context
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --datadir)
            # completions for: uninstall --datadir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --bindir)
            # completions for: uninstall --bindir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --docdir)
            # completions for: uninstall --docdir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --libdir)
            # completions for: uninstall --libdir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --prefix)
            # completions for: uninstall --prefix
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --error-reporting)
            # completions for: uninstall --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: uninstall --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: uninstall --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: uninstall --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: uninstall --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: uninstall --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: uninstall --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: uninstall --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: uninstall --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: uninstall --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: uninstall --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: uninstall --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: uninstall --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: uninstall --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: uninstall --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: uninstall --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: uninstall -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: uninstall --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: uninstall --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: uninstall --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: uninstall --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: uninstall --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: uninstall --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: uninstall -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: uninstall --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: uninstall --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: uninstall --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --debug-cache)
            # completions for: uninstall --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --destdir)
            # completions for: uninstall --destdir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --mandir)
            # completions for: uninstall --mandir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --etcdir)
            # completions for: uninstall --etcdir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sbindir)
            # completions for: uninstall --sbindir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --libexecdir)
            # completions for: uninstall --libexecdir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sections)
            # completions for: uninstall --sections
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --context | --create-install-files | --dry-run | --datadir | --bindir | --docdir | --libdir | --prefix | --stop-on-first-error | --error-reporting | --wait-for-filesystem-clock | --file-watcher | --build-info | --no-print-directory | --trace-file | --build-dir | --profile | --only-packages | --require-dune-project-file | --always-show-command-line | --config-file | --root | --ignore-promoted-rules | --default-target | --promote-install-files | --ignore-lock-dir | --release | --dump-memo-graph-with-timing | --dump-memo-graph | --watch | -w | --auto-promote | --no-buffer | --debug-digests | --debug-artifact-substitution | --debug-dependency-path | --action-stderr-on-success | --cache-check-probability | --cache | --terminal-persistence | -j | --sandbox | --verbose | --cache-storage-mode | --action-stdout-on-success | --debug-backtraces | --debug-load-dir | --debug-package-logs | --workspace | --force | -f | --print-metrics | --dump-memo-graph-format | --dump-gc-stats | -x | --diff-command | --trace-extended | --store-orig-source-dir | --instrument-with | --watch-exclusions | --debug-cache | --display-separate-messages | --destdir | --mandir | --etcdir | --sbindir | --libexecdir | --relocatable | --sections | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_exec__complete_positional_args() {
  # Takes the portion of the word under the cursor before the cursor and the
  # index of the current positional argument on the command line and adds comp
  # replies for that positional argument begining with that prefix.
  case "$2" in
    0)
      _dune_add_reply_files "$1"
      ;;
    *)
      _dune_add_reply_files "$1"
      ;;
  esac
}

_dune_exec() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      _dune_exec__complete_positional_args "$2" "$positional_argument_index"
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --context --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --manpage --no-buffer --no-build --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --context)
            # completions for: exec --context
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --error-reporting)
            # completions for: exec --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: exec --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: exec --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: exec --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: exec --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: exec --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: exec --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: exec --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: exec --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: exec --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: exec --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: exec --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: exec --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: exec --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: exec --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: exec --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: exec -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: exec --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: exec --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: exec --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: exec --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: exec --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: exec --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: exec -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: exec --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: exec --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: exec --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --debug-cache)
            # completions for: exec --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --no-build | --context | --stop-on-first-error | --error-reporting | --wait-for-filesystem-clock | --file-watcher | --build-info | --no-print-directory | --trace-file | --build-dir | --profile | --only-packages | --require-dune-project-file | --always-show-command-line | --config-file | --root | --ignore-promoted-rules | --default-target | --promote-install-files | --ignore-lock-dir | --release | --dump-memo-graph-with-timing | --dump-memo-graph | --watch | -w | --auto-promote | --no-buffer | --debug-digests | --debug-artifact-substitution | --debug-dependency-path | --action-stderr-on-success | --cache-check-probability | --cache | --terminal-persistence | -j | --sandbox | --verbose | --cache-storage-mode | --action-stdout-on-success | --debug-backtraces | --debug-load-dir | --debug-package-logs | --workspace | --force | -f | --print-metrics | --dump-memo-graph-format | --dump-gc-stats | -x | --diff-command | --trace-extended | --store-orig-source-dir | --instrument-with | --watch-exclusions | --debug-cache | --display-separate-messages | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_subst() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      # This is where we would add completions for positional arguments,
      # however this command has no positional arguments
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--build-info --debug-backtraces --help --manpage -h"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
        esac
      fi
      case "$current_word" in
        --help | -h | --build-info | --debug-backtraces | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_rules__complete_positional_args() {
  # Takes the portion of the word under the cursor before the cursor and the
  # index of the current positional argument on the command line and adds comp
  # replies for that positional argument begining with that prefix.
  case "$2" in
    *)
      _dune_add_reply_files "$1"
      ;;
  esac
}

_dune_rules() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      _dune_rules__complete_positional_args "$2" "$positional_argument_index"
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --makefile --manpage --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --recursive --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -m -o -r -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          -o)
            # completions for: rules -o
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --error-reporting)
            # completions for: rules --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: rules --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: rules --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: rules --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: rules --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: rules --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: rules --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: rules --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: rules --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: rules --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: rules --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: rules --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: rules --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: rules --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: rules --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: rules --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: rules -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: rules --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: rules --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: rules --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: rules --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: rules --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: rules --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: rules -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: rules --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: rules --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: rules --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --debug-cache)
            # completions for: rules --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | -m | --makefile | -o | --stop-on-first-error | --error-reporting | --wait-for-filesystem-clock | --file-watcher | --build-info | --no-print-directory | --trace-file | --build-dir | --profile | --only-packages | --require-dune-project-file | --always-show-command-line | --config-file | --root | --ignore-promoted-rules | --default-target | --promote-install-files | --ignore-lock-dir | --release | --dump-memo-graph-with-timing | --dump-memo-graph | --watch | -w | --auto-promote | --no-buffer | --debug-digests | --debug-artifact-substitution | --debug-dependency-path | --action-stderr-on-success | --cache-check-probability | --cache | --terminal-persistence | -j | --sandbox | --verbose | --cache-storage-mode | --action-stdout-on-success | --debug-backtraces | --debug-load-dir | --debug-package-logs | --workspace | --force | -f | --print-metrics | --dump-memo-graph-format | --dump-gc-stats | -x | --diff-command | --trace-extended | --store-orig-source-dir | --instrument-with | --watch-exclusions | --debug-cache | --display-separate-messages | -r | --recursive | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_utop__complete_positional_args() {
  # Takes the portion of the word under the cursor before the cursor and the
  # index of the current positional argument on the command line and adds comp
  # replies for that positional argument begining with that prefix.
  case "$2" in
    0)
      _dune_add_reply_files "$1"
      ;;
    *)
      _dune_add_reply_files "$1"
      ;;
  esac
}

_dune_utop() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      _dune_utop__complete_positional_args "$2" "$positional_argument_index"
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --context --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --manpage --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --context)
            # completions for: utop --context
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --debug-cache)
            # completions for: utop --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: utop --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: utop --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: utop --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: utop -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: utop --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: utop --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: utop --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: utop --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: utop --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: utop --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: utop -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: utop --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: utop --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: utop --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: utop --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: utop --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: utop --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: utop --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: utop --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: utop --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: utop --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: utop --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: utop --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: utop --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: utop --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: utop --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --error-reporting)
            # completions for: utop --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --context | --display-separate-messages | --debug-cache | --watch-exclusions | --instrument-with | --store-orig-source-dir | --trace-extended | --diff-command | -x | --dump-gc-stats | --dump-memo-graph-format | --print-metrics | --force | -f | --workspace | --debug-package-logs | --debug-load-dir | --debug-backtraces | --action-stdout-on-success | --cache-storage-mode | --verbose | --sandbox | -j | --terminal-persistence | --cache | --cache-check-probability | --action-stderr-on-success | --debug-dependency-path | --debug-artifact-substitution | --debug-digests | --no-buffer | --auto-promote | --watch | -w | --dump-memo-graph | --dump-memo-graph-with-timing | --release | --ignore-lock-dir | --promote-install-files | --default-target | --ignore-promoted-rules | --root | --config-file | --always-show-command-line | --require-dune-project-file | --only-packages | --profile | --build-dir | --trace-file | --no-print-directory | --build-info | --file-watcher | --wait-for-filesystem-clock | --error-reporting | --stop-on-first-error | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_promote__complete_positional_args() {
  # Takes the portion of the word under the cursor before the cursor and the
  # index of the current positional argument on the command line and adds comp
  # replies for that positional argument begining with that prefix.
  case "$2" in
    *)
      _dune_add_reply_files "$1"
      ;;
  esac
}

_dune_promote() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      _dune_promote__complete_positional_args "$2" "$positional_argument_index"
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --manpage --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --debug-cache)
            # completions for: promote --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: promote --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: promote --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: promote --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: promote -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: promote --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: promote --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: promote --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: promote --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: promote --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: promote --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: promote -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: promote --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: promote --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: promote --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: promote --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: promote --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: promote --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: promote --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: promote --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: promote --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: promote --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: promote --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: promote --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: promote --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: promote --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: promote --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --error-reporting)
            # completions for: promote --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --display-separate-messages | --debug-cache | --watch-exclusions | --instrument-with | --store-orig-source-dir | --trace-extended | --diff-command | -x | --dump-gc-stats | --dump-memo-graph-format | --print-metrics | --force | -f | --workspace | --debug-package-logs | --debug-load-dir | --debug-backtraces | --action-stdout-on-success | --cache-storage-mode | --verbose | --sandbox | -j | --terminal-persistence | --cache | --cache-check-probability | --action-stderr-on-success | --debug-dependency-path | --debug-artifact-substitution | --debug-digests | --no-buffer | --auto-promote | --watch | -w | --dump-memo-graph | --dump-memo-graph-with-timing | --release | --ignore-lock-dir | --promote-install-files | --default-target | --ignore-promoted-rules | --root | --config-file | --always-show-command-line | --require-dune-project-file | --only-packages | --profile | --build-dir | --trace-file | --no-print-directory | --build-info | --file-watcher | --wait-for-filesystem-clock | --error-reporting | --stop-on-first-error | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_printenv__complete_positional_args() {
  # Takes the portion of the word under the cursor before the cursor and the
  # index of the current positional argument on the command line and adds comp
  # replies for that positional argument begining with that prefix.
  case "$2" in
    0)
      _dune_add_reply_files "$1"
      ;;
  esac
}

_dune_printenv() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      _dune_printenv__complete_positional_args "$2" "$positional_argument_index"
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --field --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --manpage --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --error-reporting)
            # completions for: printenv --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: printenv --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: printenv --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: printenv --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: printenv --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: printenv --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: printenv --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: printenv --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: printenv --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: printenv --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: printenv --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: printenv --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: printenv --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: printenv --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: printenv --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: printenv --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: printenv -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: printenv --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: printenv --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: printenv --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: printenv --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: printenv --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: printenv --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: printenv -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: printenv --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: printenv --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: printenv --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --debug-cache)
            # completions for: printenv --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --field)
            # completions for: printenv --field
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --stop-on-first-error | --error-reporting | --wait-for-filesystem-clock | --file-watcher | --build-info | --no-print-directory | --trace-file | --build-dir | --profile | --only-packages | --require-dune-project-file | --always-show-command-line | --config-file | --root | --ignore-promoted-rules | --default-target | --promote-install-files | --ignore-lock-dir | --release | --dump-memo-graph-with-timing | --dump-memo-graph | --watch | -w | --auto-promote | --no-buffer | --debug-digests | --debug-artifact-substitution | --debug-dependency-path | --action-stderr-on-success | --cache-check-probability | --cache | --terminal-persistence | -j | --sandbox | --verbose | --cache-storage-mode | --action-stdout-on-success | --debug-backtraces | --debug-load-dir | --debug-package-logs | --workspace | --force | -f | --print-metrics | --dump-memo-graph-format | --dump-gc-stats | -x | --diff-command | --trace-extended | --store-orig-source-dir | --instrument-with | --watch-exclusions | --debug-cache | --display-separate-messages | --field | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_help__complete_positional_args() {
  # Takes the portion of the word under the cursor before the cursor and the
  # index of the current positional argument on the command line and adds comp
  # replies for that positional argument begining with that prefix.
  case "$2" in
    0)
      _dune_add_reply_files "$1"
      ;;
  esac
}

_dune_help() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      _dune_help__complete_positional_args "$2" "$positional_argument_index"
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--build-info --help --manpage -h"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
        esac
      fi
      case "$current_word" in
        --help | -h | --build-info | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_format-dune-file__complete_positional_args() {
  # Takes the portion of the word under the cursor before the cursor and the
  # index of the current positional argument on the command line and adds comp
  # replies for that positional argument begining with that prefix.
  case "$2" in
    0)
      _dune_add_reply_files "$1"
      ;;
  esac
}

_dune_format-dune-file() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      _dune_format-dune-file__complete_positional_args "$2" "$positional_argument_index"
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--dune-version --help --manpage -h"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --dune-version)
            # completions for: format-dune-file --dune-version
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --dune-version | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_upgrade() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      # This is where we would add completions for positional arguments,
      # however this command has no positional arguments
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --manpage --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --error-reporting)
            # completions for: upgrade --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: upgrade --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: upgrade --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: upgrade --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: upgrade --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: upgrade --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: upgrade --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: upgrade --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: upgrade --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: upgrade --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: upgrade --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: upgrade --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: upgrade --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: upgrade --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: upgrade --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: upgrade --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: upgrade -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: upgrade --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: upgrade --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: upgrade --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: upgrade --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: upgrade --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: upgrade --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: upgrade -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: upgrade --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: upgrade --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: upgrade --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --debug-cache)
            # completions for: upgrade --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --stop-on-first-error | --error-reporting | --wait-for-filesystem-clock | --file-watcher | --build-info | --no-print-directory | --trace-file | --build-dir | --profile | --only-packages | --require-dune-project-file | --always-show-command-line | --config-file | --root | --ignore-promoted-rules | --default-target | --promote-install-files | --ignore-lock-dir | --release | --dump-memo-graph-with-timing | --dump-memo-graph | --watch | -w | --auto-promote | --no-buffer | --debug-digests | --debug-artifact-substitution | --debug-dependency-path | --action-stderr-on-success | --cache-check-probability | --cache | --terminal-persistence | -j | --sandbox | --verbose | --cache-storage-mode | --action-stdout-on-success | --debug-backtraces | --debug-load-dir | --debug-package-logs | --workspace | --force | -f | --print-metrics | --dump-memo-graph-format | --dump-gc-stats | -x | --diff-command | --trace-extended | --store-orig-source-dir | --instrument-with | --watch-exclusions | --debug-cache | --display-separate-messages | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_cache__trim() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      # This is where we would add completions for positional arguments,
      # however this command has no positional arguments
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--help --manpage --size --trimmed-size -h"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --trimmed-size)
            # completions for: trim cache --trimmed-size
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --size)
            # completions for: trim cache --size
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --trimmed-size | --size | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_cache__size() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      # This is where we would add completions for positional arguments,
      # however this command has no positional arguments
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--help --machine-readable --manpage -h"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
        esac
      fi
      case "$current_word" in
        --help | -h | --machine-readable | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_cache__clear() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      # This is where we would add completions for positional arguments,
      # however this command has no positional arguments
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--help --manpage -h"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
        esac
      fi
      case "$current_word" in
        --help | -h | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_cache() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      _dune_add_reply_fixed "$2" "trim size clear"
      # This is where we would add completions for positional arguments,
      # however this command has no positional arguments
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--help --manpage -h"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
        esac
      fi
      case "$current_word" in
        --help | -h | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        trim)
          _dune_cache__trim "$1" "$2" "$3"
          return "$?"
          ;;
        size)
          _dune_cache__size "$1" "$2" "$3"
          return "$?"
          ;;
        clear)
          _dune_cache__clear "$1" "$2" "$3"
          return "$?"
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_top__complete_positional_args() {
  # Takes the portion of the word under the cursor before the cursor and the
  # index of the current positional argument on the command line and adds comp
  # replies for that positional argument begining with that prefix.
  case "$2" in
    0)
      _dune_add_reply_files "$1"
      ;;
  esac
}

_dune_top() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      _dune_top__complete_positional_args "$2" "$positional_argument_index"
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --context --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --manpage --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --error-reporting)
            # completions for: top --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: top --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: top --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: top --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: top --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: top --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: top --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: top --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: top --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: top --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: top --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: top --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: top --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: top --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: top --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: top --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: top -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: top --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: top --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: top --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: top --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: top --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: top --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: top -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: top --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: top --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: top --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --debug-cache)
            # completions for: top --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --context)
            # completions for: top --context
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --stop-on-first-error | --error-reporting | --wait-for-filesystem-clock | --file-watcher | --build-info | --no-print-directory | --trace-file | --build-dir | --profile | --only-packages | --require-dune-project-file | --always-show-command-line | --config-file | --root | --ignore-promoted-rules | --default-target | --promote-install-files | --ignore-lock-dir | --release | --dump-memo-graph-with-timing | --dump-memo-graph | --watch | -w | --auto-promote | --no-buffer | --debug-digests | --debug-artifact-substitution | --debug-dependency-path | --action-stderr-on-success | --cache-check-probability | --cache | --terminal-persistence | -j | --sandbox | --verbose | --cache-storage-mode | --action-stdout-on-success | --debug-backtraces | --debug-load-dir | --debug-package-logs | --workspace | --force | -f | --print-metrics | --dump-memo-graph-format | --dump-gc-stats | -x | --diff-command | --trace-extended | --store-orig-source-dir | --instrument-with | --watch-exclusions | --debug-cache | --display-separate-messages | --context | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_ocaml-merlin() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      # This is where we would add completions for positional arguments,
      # however this command has no positional arguments
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --context --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --manpage --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --debug-cache)
            # completions for: ocaml-merlin --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: ocaml-merlin --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: ocaml-merlin --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: ocaml-merlin --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: ocaml-merlin -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: ocaml-merlin --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: ocaml-merlin --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: ocaml-merlin --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: ocaml-merlin
            # --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: ocaml-merlin --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: ocaml-merlin --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: ocaml-merlin -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: ocaml-merlin --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: ocaml-merlin --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: ocaml-merlin
            # --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: ocaml-merlin
            # --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: ocaml-merlin --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: ocaml-merlin --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: ocaml-merlin --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: ocaml-merlin --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: ocaml-merlin --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: ocaml-merlin
            # --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: ocaml-merlin --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: ocaml-merlin --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: ocaml-merlin --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: ocaml-merlin --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: ocaml-merlin --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --error-reporting)
            # completions for: ocaml-merlin --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --context)
            # completions for: ocaml-merlin --context
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --display-separate-messages | --debug-cache | --watch-exclusions | --instrument-with | --store-orig-source-dir | --trace-extended | --diff-command | -x | --dump-gc-stats | --dump-memo-graph-format | --print-metrics | --force | -f | --workspace | --debug-package-logs | --debug-load-dir | --debug-backtraces | --action-stdout-on-success | --cache-storage-mode | --verbose | --sandbox | -j | --terminal-persistence | --cache | --cache-check-probability | --action-stderr-on-success | --debug-dependency-path | --debug-artifact-substitution | --debug-digests | --no-buffer | --auto-promote | --watch | -w | --dump-memo-graph | --dump-memo-graph-with-timing | --release | --ignore-lock-dir | --promote-install-files | --default-target | --ignore-promoted-rules | --root | --config-file | --always-show-command-line | --require-dune-project-file | --only-packages | --profile | --build-dir | --trace-file | --no-print-directory | --build-info | --file-watcher | --wait-for-filesystem-clock | --error-reporting | --stop-on-first-error | --context | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_shutdown() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      # This is where we would add completions for positional arguments,
      # however this command has no positional arguments
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --manpage --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --error-reporting)
            # completions for: shutdown --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: shutdown --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: shutdown --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: shutdown --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: shutdown --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: shutdown --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: shutdown --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: shutdown --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: shutdown --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: shutdown --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: shutdown --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: shutdown --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: shutdown --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: shutdown --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: shutdown --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: shutdown --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: shutdown -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: shutdown --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: shutdown --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: shutdown --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: shutdown --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: shutdown --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: shutdown --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: shutdown -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: shutdown --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: shutdown --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: shutdown --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --debug-cache)
            # completions for: shutdown --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --stop-on-first-error | --error-reporting | --wait-for-filesystem-clock | --file-watcher | --build-info | --no-print-directory | --trace-file | --build-dir | --profile | --only-packages | --require-dune-project-file | --always-show-command-line | --config-file | --root | --ignore-promoted-rules | --default-target | --promote-install-files | --ignore-lock-dir | --release | --dump-memo-graph-with-timing | --dump-memo-graph | --watch | -w | --auto-promote | --no-buffer | --debug-digests | --debug-artifact-substitution | --debug-dependency-path | --action-stderr-on-success | --cache-check-probability | --cache | --terminal-persistence | -j | --sandbox | --verbose | --cache-storage-mode | --action-stdout-on-success | --debug-backtraces | --debug-load-dir | --debug-package-logs | --workspace | --force | -f | --print-metrics | --dump-memo-graph-format | --dump-gc-stats | -x | --diff-command | --trace-extended | --store-orig-source-dir | --instrument-with | --watch-exclusions | --debug-cache | --display-separate-messages | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_diagnostics() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      # This is where we would add completions for positional arguments,
      # however this command has no positional arguments
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --manpage --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --error-reporting)
            # completions for: diagnostics --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: diagnostics --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: diagnostics --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: diagnostics --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: diagnostics --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: diagnostics --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: diagnostics
            # --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: diagnostics --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: diagnostics --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: diagnostics --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: diagnostics --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: diagnostics --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: diagnostics
            # --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: diagnostics --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: diagnostics --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: diagnostics --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: diagnostics -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: diagnostics --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: diagnostics --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: diagnostics
            # --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: diagnostics --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: diagnostics --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: diagnostics --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: diagnostics -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: diagnostics --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: diagnostics --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: diagnostics --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --debug-cache)
            # completions for: diagnostics --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --stop-on-first-error | --error-reporting | --wait-for-filesystem-clock | --file-watcher | --build-info | --no-print-directory | --trace-file | --build-dir | --profile | --only-packages | --require-dune-project-file | --always-show-command-line | --config-file | --root | --ignore-promoted-rules | --default-target | --promote-install-files | --ignore-lock-dir | --release | --dump-memo-graph-with-timing | --dump-memo-graph | --watch | -w | --auto-promote | --no-buffer | --debug-digests | --debug-artifact-substitution | --debug-dependency-path | --action-stderr-on-success | --cache-check-probability | --cache | --terminal-persistence | -j | --sandbox | --verbose | --cache-storage-mode | --action-stdout-on-success | --debug-backtraces | --debug-load-dir | --debug-package-logs | --workspace | --force | -f | --print-metrics | --dump-memo-graph-format | --dump-gc-stats | -x | --diff-command | --trace-extended | --store-orig-source-dir | --instrument-with | --watch-exclusions | --debug-cache | --display-separate-messages | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_monitor() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      # This is where we would add completions for positional arguments,
      # however this command has no positional arguments
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --manpage --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --quit-on-disconnect --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --debug-cache)
            # completions for: monitor --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: monitor --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: monitor --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: monitor --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: monitor -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: monitor --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: monitor --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: monitor --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: monitor --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: monitor --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: monitor --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: monitor -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: monitor --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: monitor --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: monitor --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: monitor --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: monitor --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: monitor --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: monitor --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: monitor --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: monitor --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: monitor --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: monitor --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: monitor --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: monitor --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: monitor --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: monitor --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --error-reporting)
            # completions for: monitor --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --display-separate-messages | --debug-cache | --watch-exclusions | --instrument-with | --store-orig-source-dir | --trace-extended | --diff-command | -x | --dump-gc-stats | --dump-memo-graph-format | --print-metrics | --force | -f | --workspace | --debug-package-logs | --debug-load-dir | --debug-backtraces | --action-stdout-on-success | --cache-storage-mode | --verbose | --sandbox | -j | --terminal-persistence | --cache | --cache-check-probability | --action-stderr-on-success | --debug-dependency-path | --debug-artifact-substitution | --debug-digests | --no-buffer | --auto-promote | --watch | -w | --dump-memo-graph | --dump-memo-graph-with-timing | --release | --ignore-lock-dir | --promote-install-files | --default-target | --ignore-promoted-rules | --root | --config-file | --always-show-command-line | --require-dune-project-file | --only-packages | --profile | --build-dir | --trace-file | --no-print-directory | --build-info | --file-watcher | --wait-for-filesystem-clock | --error-reporting | --stop-on-first-error | --quit-on-disconnect | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_ocaml__utop__complete_positional_args() {
  # Takes the portion of the word under the cursor before the cursor and the
  # index of the current positional argument on the command line and adds comp
  # replies for that positional argument begining with that prefix.
  case "$2" in
    0)
      _dune_add_reply_files "$1"
      ;;
    *)
      _dune_add_reply_files "$1"
      ;;
  esac
}

_dune_ocaml__utop() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      _dune_ocaml__utop__complete_positional_args "$2" "$positional_argument_index"
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --context --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --manpage --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --context)
            # completions for: utop ocaml --context
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --debug-cache)
            # completions for: utop ocaml --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: utop ocaml --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: utop ocaml --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: utop ocaml --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: utop ocaml -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: utop ocaml --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: utop ocaml --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: utop ocaml --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: utop ocaml --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: utop ocaml --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: utop ocaml --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: utop ocaml -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: utop ocaml --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: utop ocaml --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: utop ocaml --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: utop ocaml --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: utop ocaml --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: utop ocaml --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: utop ocaml --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: utop ocaml --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: utop ocaml --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: utop ocaml
            # --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: utop ocaml --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: utop ocaml --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: utop ocaml --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: utop ocaml --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: utop ocaml --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --error-reporting)
            # completions for: utop ocaml --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --context | --display-separate-messages | --debug-cache | --watch-exclusions | --instrument-with | --store-orig-source-dir | --trace-extended | --diff-command | -x | --dump-gc-stats | --dump-memo-graph-format | --print-metrics | --force | -f | --workspace | --debug-package-logs | --debug-load-dir | --debug-backtraces | --action-stdout-on-success | --cache-storage-mode | --verbose | --sandbox | -j | --terminal-persistence | --cache | --cache-check-probability | --action-stderr-on-success | --debug-dependency-path | --debug-artifact-substitution | --debug-digests | --no-buffer | --auto-promote | --watch | -w | --dump-memo-graph | --dump-memo-graph-with-timing | --release | --ignore-lock-dir | --promote-install-files | --default-target | --ignore-promoted-rules | --root | --config-file | --always-show-command-line | --require-dune-project-file | --only-packages | --profile | --build-dir | --trace-file | --no-print-directory | --build-info | --file-watcher | --wait-for-filesystem-clock | --error-reporting | --stop-on-first-error | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_ocaml__ocaml-merlin() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      # This is where we would add completions for positional arguments,
      # however this command has no positional arguments
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --context --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --manpage --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --debug-cache)
            # completions for: ocaml-merlin ocaml --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: ocaml-merlin ocaml --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: ocaml-merlin ocaml --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: ocaml-merlin ocaml --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: ocaml-merlin ocaml -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: ocaml-merlin ocaml --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: ocaml-merlin ocaml
            # --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: ocaml-merlin ocaml --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: ocaml-merlin ocaml
            # --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: ocaml-merlin ocaml
            # --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: ocaml-merlin ocaml --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: ocaml-merlin ocaml -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: ocaml-merlin ocaml
            # --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: ocaml-merlin ocaml --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: ocaml-merlin ocaml
            # --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: ocaml-merlin ocaml
            # --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: ocaml-merlin ocaml --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: ocaml-merlin ocaml
            # --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: ocaml-merlin ocaml --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: ocaml-merlin ocaml --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: ocaml-merlin ocaml --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: ocaml-merlin ocaml
            # --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: ocaml-merlin ocaml --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: ocaml-merlin ocaml --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: ocaml-merlin ocaml --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: ocaml-merlin ocaml --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: ocaml-merlin ocaml --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --error-reporting)
            # completions for: ocaml-merlin ocaml --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --context)
            # completions for: ocaml-merlin ocaml --context
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --display-separate-messages | --debug-cache | --watch-exclusions | --instrument-with | --store-orig-source-dir | --trace-extended | --diff-command | -x | --dump-gc-stats | --dump-memo-graph-format | --print-metrics | --force | -f | --workspace | --debug-package-logs | --debug-load-dir | --debug-backtraces | --action-stdout-on-success | --cache-storage-mode | --verbose | --sandbox | -j | --terminal-persistence | --cache | --cache-check-probability | --action-stderr-on-success | --debug-dependency-path | --debug-artifact-substitution | --debug-digests | --no-buffer | --auto-promote | --watch | -w | --dump-memo-graph | --dump-memo-graph-with-timing | --release | --ignore-lock-dir | --promote-install-files | --default-target | --ignore-promoted-rules | --root | --config-file | --always-show-command-line | --require-dune-project-file | --only-packages | --profile | --build-dir | --trace-file | --no-print-directory | --build-info | --file-watcher | --wait-for-filesystem-clock | --error-reporting | --stop-on-first-error | --context | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_ocaml__dump-dot-merlin__complete_positional_args() {
  # Takes the portion of the word under the cursor before the cursor and the
  # index of the current positional argument on the command line and adds comp
  # replies for that positional argument begining with that prefix.
  case "$2" in
    0)
      _dune_add_reply_files "$1"
      ;;
  esac
}

_dune_ocaml__dump-dot-merlin() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      _dune_ocaml__dump-dot-merlin__complete_positional_args "$2" "$positional_argument_index"
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --context --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --manpage --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --error-reporting)
            # completions for: dump-dot-merlin ocaml
            # --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: dump-dot-merlin ocaml --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: dump-dot-merlin ocaml --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: dump-dot-merlin ocaml --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: dump-dot-merlin ocaml --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: dump-dot-merlin ocaml --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: dump-dot-merlin ocaml
            # --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: dump-dot-merlin ocaml --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: dump-dot-merlin ocaml --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: dump-dot-merlin ocaml
            # --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: dump-dot-merlin ocaml
            # --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: dump-dot-merlin ocaml
            # --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: dump-dot-merlin ocaml
            # --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: dump-dot-merlin ocaml
            # --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: dump-dot-merlin ocaml --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: dump-dot-merlin ocaml
            # --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: dump-dot-merlin ocaml -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: dump-dot-merlin ocaml --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: dump-dot-merlin ocaml
            # --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: dump-dot-merlin ocaml
            # --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: dump-dot-merlin ocaml --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: dump-dot-merlin ocaml
            # --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: dump-dot-merlin ocaml --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: dump-dot-merlin ocaml -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: dump-dot-merlin ocaml --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: dump-dot-merlin ocaml
            # --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: dump-dot-merlin ocaml
            # --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --debug-cache)
            # completions for: dump-dot-merlin ocaml --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --context)
            # completions for: dump-dot-merlin ocaml --context
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --stop-on-first-error | --error-reporting | --wait-for-filesystem-clock | --file-watcher | --build-info | --no-print-directory | --trace-file | --build-dir | --profile | --only-packages | --require-dune-project-file | --always-show-command-line | --config-file | --root | --ignore-promoted-rules | --default-target | --promote-install-files | --ignore-lock-dir | --release | --dump-memo-graph-with-timing | --dump-memo-graph | --watch | -w | --auto-promote | --no-buffer | --debug-digests | --debug-artifact-substitution | --debug-dependency-path | --action-stderr-on-success | --cache-check-probability | --cache | --terminal-persistence | -j | --sandbox | --verbose | --cache-storage-mode | --action-stdout-on-success | --debug-backtraces | --debug-load-dir | --debug-package-logs | --workspace | --force | -f | --print-metrics | --dump-memo-graph-format | --dump-gc-stats | -x | --diff-command | --trace-extended | --store-orig-source-dir | --instrument-with | --watch-exclusions | --debug-cache | --display-separate-messages | --context | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_ocaml__top__complete_positional_args() {
  # Takes the portion of the word under the cursor before the cursor and the
  # index of the current positional argument on the command line and adds comp
  # replies for that positional argument begining with that prefix.
  case "$2" in
    0)
      _dune_add_reply_files "$1"
      ;;
  esac
}

_dune_ocaml__top() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      _dune_ocaml__top__complete_positional_args "$2" "$positional_argument_index"
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --context --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --manpage --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --error-reporting)
            # completions for: top ocaml --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: top ocaml --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: top ocaml --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: top ocaml --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: top ocaml --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: top ocaml --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: top ocaml --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: top ocaml --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: top ocaml --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: top ocaml --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: top ocaml --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: top ocaml --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: top ocaml --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: top ocaml --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: top ocaml --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: top ocaml --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: top ocaml -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: top ocaml --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: top ocaml --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: top ocaml --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: top ocaml --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: top ocaml --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: top ocaml --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: top ocaml -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: top ocaml --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: top ocaml --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: top ocaml --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --debug-cache)
            # completions for: top ocaml --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --context)
            # completions for: top ocaml --context
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --stop-on-first-error | --error-reporting | --wait-for-filesystem-clock | --file-watcher | --build-info | --no-print-directory | --trace-file | --build-dir | --profile | --only-packages | --require-dune-project-file | --always-show-command-line | --config-file | --root | --ignore-promoted-rules | --default-target | --promote-install-files | --ignore-lock-dir | --release | --dump-memo-graph-with-timing | --dump-memo-graph | --watch | -w | --auto-promote | --no-buffer | --debug-digests | --debug-artifact-substitution | --debug-dependency-path | --action-stderr-on-success | --cache-check-probability | --cache | --terminal-persistence | -j | --sandbox | --verbose | --cache-storage-mode | --action-stdout-on-success | --debug-backtraces | --debug-load-dir | --debug-package-logs | --workspace | --force | -f | --print-metrics | --dump-memo-graph-format | --dump-gc-stats | -x | --diff-command | --trace-extended | --store-orig-source-dir | --instrument-with | --watch-exclusions | --debug-cache | --display-separate-messages | --context | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_ocaml__top-module__complete_positional_args() {
  # Takes the portion of the word under the cursor before the cursor and the
  # index of the current positional argument on the command line and adds comp
  # replies for that positional argument begining with that prefix.
  case "$2" in
    0)
      _dune_add_reply_files "$1"
      ;;
  esac
}

_dune_ocaml__top-module() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      _dune_ocaml__top-module__complete_positional_args "$2" "$positional_argument_index"
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --context --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --manpage --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --error-reporting)
            # completions for: top-module ocaml --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: top-module ocaml --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: top-module ocaml --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: top-module ocaml --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: top-module ocaml --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: top-module ocaml --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: top-module ocaml
            # --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: top-module ocaml --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: top-module ocaml --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: top-module ocaml --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: top-module ocaml
            # --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: top-module ocaml --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: top-module ocaml
            # --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: top-module ocaml
            # --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: top-module ocaml --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: top-module ocaml
            # --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: top-module ocaml -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: top-module ocaml --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: top-module ocaml --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: top-module ocaml
            # --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: top-module ocaml --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: top-module ocaml
            # --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: top-module ocaml --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: top-module ocaml -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: top-module ocaml --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: top-module ocaml --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: top-module ocaml --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --debug-cache)
            # completions for: top-module ocaml --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --context)
            # completions for: top-module ocaml --context
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --stop-on-first-error | --error-reporting | --wait-for-filesystem-clock | --file-watcher | --build-info | --no-print-directory | --trace-file | --build-dir | --profile | --only-packages | --require-dune-project-file | --always-show-command-line | --config-file | --root | --ignore-promoted-rules | --default-target | --promote-install-files | --ignore-lock-dir | --release | --dump-memo-graph-with-timing | --dump-memo-graph | --watch | -w | --auto-promote | --no-buffer | --debug-digests | --debug-artifact-substitution | --debug-dependency-path | --action-stderr-on-success | --cache-check-probability | --cache | --terminal-persistence | -j | --sandbox | --verbose | --cache-storage-mode | --action-stdout-on-success | --debug-backtraces | --debug-load-dir | --debug-package-logs | --workspace | --force | -f | --print-metrics | --dump-memo-graph-format | --dump-gc-stats | -x | --diff-command | --trace-extended | --store-orig-source-dir | --instrument-with | --watch-exclusions | --debug-cache | --display-separate-messages | --context | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_ocaml__merlin__dump-config__complete_positional_args() {
  # Takes the portion of the word under the cursor before the cursor and the
  # index of the current positional argument on the command line and adds comp
  # replies for that positional argument begining with that prefix.
  case "$2" in
    0)
      _dune_add_reply_files "$1"
      ;;
  esac
}

_dune_ocaml__merlin__dump-config() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      _dune_ocaml__merlin__dump-config__complete_positional_args "$2" "$positional_argument_index"
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --context --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --manpage --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --error-reporting)
            # completions for: dump-config merlin ocaml
            # --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: dump-config merlin ocaml
            # --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: dump-config merlin ocaml --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: dump-config merlin ocaml --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: dump-config merlin ocaml --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: dump-config merlin ocaml
            # --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: dump-config merlin ocaml
            # --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: dump-config merlin ocaml
            # --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: dump-config merlin ocaml --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: dump-config merlin ocaml
            # --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: dump-config merlin ocaml
            # --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: dump-config merlin ocaml
            # --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: dump-config merlin ocaml
            # --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: dump-config merlin ocaml
            # --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: dump-config merlin ocaml --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: dump-config merlin ocaml
            # --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: dump-config merlin ocaml -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: dump-config merlin ocaml --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: dump-config merlin ocaml
            # --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: dump-config merlin ocaml
            # --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: dump-config merlin ocaml --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: dump-config merlin ocaml
            # --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: dump-config merlin ocaml
            # --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: dump-config merlin ocaml -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: dump-config merlin ocaml
            # --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: dump-config merlin ocaml
            # --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: dump-config merlin ocaml
            # --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --debug-cache)
            # completions for: dump-config merlin ocaml
            # --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --context)
            # completions for: dump-config merlin ocaml --context
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --stop-on-first-error | --error-reporting | --wait-for-filesystem-clock | --file-watcher | --build-info | --no-print-directory | --trace-file | --build-dir | --profile | --only-packages | --require-dune-project-file | --always-show-command-line | --config-file | --root | --ignore-promoted-rules | --default-target | --promote-install-files | --ignore-lock-dir | --release | --dump-memo-graph-with-timing | --dump-memo-graph | --watch | -w | --auto-promote | --no-buffer | --debug-digests | --debug-artifact-substitution | --debug-dependency-path | --action-stderr-on-success | --cache-check-probability | --cache | --terminal-persistence | -j | --sandbox | --verbose | --cache-storage-mode | --action-stdout-on-success | --debug-backtraces | --debug-load-dir | --debug-package-logs | --workspace | --force | -f | --print-metrics | --dump-memo-graph-format | --dump-gc-stats | -x | --diff-command | --trace-extended | --store-orig-source-dir | --instrument-with | --watch-exclusions | --debug-cache | --display-separate-messages | --context | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_ocaml__merlin__start-session() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      # This is where we would add completions for positional arguments,
      # however this command has no positional arguments
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --context --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --manpage --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --debug-cache)
            # completions for: start-session merlin ocaml
            # --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: start-session merlin ocaml
            # --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: start-session merlin ocaml
            # --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: start-session merlin ocaml
            # --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: start-session merlin ocaml -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: start-session merlin ocaml
            # --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: start-session merlin ocaml
            # --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: start-session merlin ocaml
            # --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: start-session merlin ocaml
            # --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: start-session merlin ocaml
            # --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: start-session merlin ocaml --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: start-session merlin ocaml -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: start-session merlin ocaml
            # --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: start-session merlin ocaml --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: start-session merlin ocaml
            # --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: start-session merlin ocaml
            # --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: start-session merlin ocaml
            # --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: start-session merlin ocaml
            # --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: start-session merlin ocaml
            # --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: start-session merlin ocaml --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: start-session merlin ocaml
            # --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: start-session merlin ocaml
            # --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: start-session merlin ocaml
            # --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: start-session merlin ocaml --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: start-session merlin ocaml
            # --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: start-session merlin ocaml
            # --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: start-session merlin ocaml
            # --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --error-reporting)
            # completions for: start-session merlin ocaml
            # --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --context)
            # completions for: start-session merlin ocaml --context
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --display-separate-messages | --debug-cache | --watch-exclusions | --instrument-with | --store-orig-source-dir | --trace-extended | --diff-command | -x | --dump-gc-stats | --dump-memo-graph-format | --print-metrics | --force | -f | --workspace | --debug-package-logs | --debug-load-dir | --debug-backtraces | --action-stdout-on-success | --cache-storage-mode | --verbose | --sandbox | -j | --terminal-persistence | --cache | --cache-check-probability | --action-stderr-on-success | --debug-dependency-path | --debug-artifact-substitution | --debug-digests | --no-buffer | --auto-promote | --watch | -w | --dump-memo-graph | --dump-memo-graph-with-timing | --release | --ignore-lock-dir | --promote-install-files | --default-target | --ignore-promoted-rules | --root | --config-file | --always-show-command-line | --require-dune-project-file | --only-packages | --profile | --build-dir | --trace-file | --no-print-directory | --build-info | --file-watcher | --wait-for-filesystem-clock | --error-reporting | --stop-on-first-error | --context | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_ocaml__merlin() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      _dune_add_reply_fixed "$2" "dump-config start-session"
      # This is where we would add completions for positional arguments,
      # however this command has no positional arguments
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--help --manpage -h"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
        esac
      fi
      case "$current_word" in
        --help | -h | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        dump-config)
          _dune_ocaml__merlin__dump-config "$1" "$2" "$3"
          return "$?"
          ;;
        start-session)
          _dune_ocaml__merlin__start-session "$1" "$2" "$3"
          return "$?"
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_ocaml__doc() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      # This is where we would add completions for positional arguments,
      # however this command has no positional arguments
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --manpage --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --error-reporting)
            # completions for: doc ocaml --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: doc ocaml --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: doc ocaml --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: doc ocaml --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: doc ocaml --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: doc ocaml --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: doc ocaml --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: doc ocaml --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: doc ocaml --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: doc ocaml --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: doc ocaml --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: doc ocaml --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: doc ocaml --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: doc ocaml --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: doc ocaml --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: doc ocaml --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: doc ocaml -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: doc ocaml --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: doc ocaml --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: doc ocaml --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: doc ocaml --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: doc ocaml --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: doc ocaml --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: doc ocaml -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: doc ocaml --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: doc ocaml --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: doc ocaml --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --debug-cache)
            # completions for: doc ocaml --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --stop-on-first-error | --error-reporting | --wait-for-filesystem-clock | --file-watcher | --build-info | --no-print-directory | --trace-file | --build-dir | --profile | --only-packages | --require-dune-project-file | --always-show-command-line | --config-file | --root | --ignore-promoted-rules | --default-target | --promote-install-files | --ignore-lock-dir | --release | --dump-memo-graph-with-timing | --dump-memo-graph | --watch | -w | --auto-promote | --no-buffer | --debug-digests | --debug-artifact-substitution | --debug-dependency-path | --action-stderr-on-success | --cache-check-probability | --cache | --terminal-persistence | -j | --sandbox | --verbose | --cache-storage-mode | --action-stdout-on-success | --debug-backtraces | --debug-load-dir | --debug-package-logs | --workspace | --force | -f | --print-metrics | --dump-memo-graph-format | --dump-gc-stats | -x | --diff-command | --trace-extended | --store-orig-source-dir | --instrument-with | --watch-exclusions | --debug-cache | --display-separate-messages | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_ocaml() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      _dune_add_reply_fixed "$2" "utop ocaml-merlin dump-dot-merlin top top-module merlin doc"
      # This is where we would add completions for positional arguments,
      # however this command has no positional arguments
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--help --manpage -h"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
        esac
      fi
      case "$current_word" in
        --help | -h | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        utop)
          _dune_ocaml__utop "$1" "$2" "$3"
          return "$?"
          ;;
        ocaml-merlin)
          _dune_ocaml__ocaml-merlin "$1" "$2" "$3"
          return "$?"
          ;;
        dump-dot-merlin)
          _dune_ocaml__dump-dot-merlin "$1" "$2" "$3"
          return "$?"
          ;;
        top)
          _dune_ocaml__top "$1" "$2" "$3"
          return "$?"
          ;;
        top-module)
          _dune_ocaml__top-module "$1" "$2" "$3"
          return "$?"
          ;;
        merlin)
          _dune_ocaml__merlin "$1" "$2" "$3"
          return "$?"
          ;;
        doc)
          _dune_ocaml__doc "$1" "$2" "$3"
          return "$?"
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_coq__top__complete_positional_args() {
  # Takes the portion of the word under the cursor before the cursor and the
  # index of the current positional argument on the command line and adds comp
  # replies for that positional argument begining with that prefix.
  case "$2" in
    0)
      _dune_add_reply_files "$1"
      ;;
    *)
      _dune_add_reply_files "$1"
      ;;
  esac
}

_dune_coq__top() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      _dune_coq__top__complete_positional_args "$2" "$positional_argument_index"
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --context --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --manpage --no-buffer --no-build --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --toplevel --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --toplevel)
            # completions for: top coq --toplevel
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --debug-cache)
            # completions for: top coq --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: top coq --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: top coq --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: top coq --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: top coq -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: top coq --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: top coq --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: top coq --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: top coq --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: top coq --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: top coq --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: top coq -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: top coq --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: top coq --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: top coq --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: top coq --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: top coq --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: top coq --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: top coq --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: top coq --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: top coq --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: top coq --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: top coq --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: top coq --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: top coq --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: top coq --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: top coq --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --error-reporting)
            # completions for: top coq --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --context)
            # completions for: top coq --context
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --toplevel | --display-separate-messages | --debug-cache | --watch-exclusions | --instrument-with | --store-orig-source-dir | --trace-extended | --diff-command | -x | --dump-gc-stats | --dump-memo-graph-format | --print-metrics | --force | -f | --workspace | --debug-package-logs | --debug-load-dir | --debug-backtraces | --action-stdout-on-success | --cache-storage-mode | --verbose | --sandbox | -j | --terminal-persistence | --cache | --cache-check-probability | --action-stderr-on-success | --debug-dependency-path | --debug-artifact-substitution | --debug-digests | --no-buffer | --auto-promote | --watch | -w | --dump-memo-graph | --dump-memo-graph-with-timing | --release | --ignore-lock-dir | --promote-install-files | --default-target | --ignore-promoted-rules | --root | --config-file | --always-show-command-line | --require-dune-project-file | --only-packages | --profile | --build-dir | --trace-file | --no-print-directory | --build-info | --file-watcher | --wait-for-filesystem-clock | --error-reporting | --stop-on-first-error | --context | --no-build | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_coq() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      _dune_add_reply_fixed "$2" "top"
      # This is where we would add completions for positional arguments,
      # however this command has no positional arguments
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--help --manpage -h"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
        esac
      fi
      case "$current_word" in
        --help | -h | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        top)
          _dune_coq__top "$1" "$2" "$3"
          return "$?"
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_describe__workspace__complete_positional_args() {
  # Takes the portion of the word under the cursor before the cursor and the
  # index of the current positional argument on the command line and adds comp
  # replies for that positional argument begining with that prefix.
  case "$2" in
    *)
      _dune_add_reply_files "$1"
      ;;
  esac
}

_dune_describe__workspace() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      _dune_describe__workspace__complete_positional_args "$2" "$positional_argument_index"
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --context --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --format --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --lang --manpage --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --sanitize-for-tests --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --with-deps --with-pps --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --lang)
            # completions for: workspace describe --lang
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --context)
            # completions for: workspace describe --context
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --debug-cache)
            # completions for: workspace describe --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: workspace describe --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: workspace describe --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: workspace describe --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: workspace describe -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: workspace describe --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: workspace describe
            # --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: workspace describe --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: workspace describe
            # --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: workspace describe
            # --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: workspace describe --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: workspace describe -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: workspace describe
            # --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: workspace describe --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: workspace describe
            # --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: workspace describe
            # --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: workspace describe --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: workspace describe
            # --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: workspace describe --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: workspace describe --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: workspace describe --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: workspace describe
            # --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: workspace describe --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: workspace describe --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: workspace describe --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: workspace describe --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: workspace describe --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --error-reporting)
            # completions for: workspace describe --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --format)
            # completions for: workspace describe --format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --lang | --context | --display-separate-messages | --debug-cache | --watch-exclusions | --instrument-with | --store-orig-source-dir | --trace-extended | --diff-command | -x | --dump-gc-stats | --dump-memo-graph-format | --print-metrics | --force | -f | --workspace | --debug-package-logs | --debug-load-dir | --debug-backtraces | --action-stdout-on-success | --cache-storage-mode | --verbose | --sandbox | -j | --terminal-persistence | --cache | --cache-check-probability | --action-stderr-on-success | --debug-dependency-path | --debug-artifact-substitution | --debug-digests | --no-buffer | --auto-promote | --watch | -w | --dump-memo-graph | --dump-memo-graph-with-timing | --release | --ignore-lock-dir | --promote-install-files | --default-target | --ignore-promoted-rules | --root | --config-file | --always-show-command-line | --require-dune-project-file | --only-packages | --profile | --build-dir | --trace-file | --no-print-directory | --build-info | --file-watcher | --wait-for-filesystem-clock | --error-reporting | --stop-on-first-error | --format | --with-pps | --with-deps | --sanitize-for-tests | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_describe__external-lib-deps() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      # This is where we would add completions for positional arguments,
      # however this command has no positional arguments
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --context --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --format --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --lang --manpage --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --lang)
            # completions for: external-lib-deps describe --lang
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --debug-cache)
            # completions for: external-lib-deps describe
            # --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: external-lib-deps describe
            # --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: external-lib-deps describe
            # --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: external-lib-deps describe
            # --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: external-lib-deps describe -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: external-lib-deps describe
            # --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: external-lib-deps describe
            # --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: external-lib-deps describe
            # --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: external-lib-deps describe
            # --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: external-lib-deps describe
            # --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: external-lib-deps describe --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: external-lib-deps describe -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: external-lib-deps describe
            # --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: external-lib-deps describe --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: external-lib-deps describe
            # --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: external-lib-deps describe
            # --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: external-lib-deps describe
            # --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: external-lib-deps describe
            # --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: external-lib-deps describe
            # --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: external-lib-deps describe --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: external-lib-deps describe
            # --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: external-lib-deps describe
            # --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: external-lib-deps describe
            # --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: external-lib-deps describe --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: external-lib-deps describe
            # --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: external-lib-deps describe
            # --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: external-lib-deps describe
            # --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --error-reporting)
            # completions for: external-lib-deps describe
            # --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --context)
            # completions for: external-lib-deps describe --context
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --format)
            # completions for: external-lib-deps describe --format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --lang | --display-separate-messages | --debug-cache | --watch-exclusions | --instrument-with | --store-orig-source-dir | --trace-extended | --diff-command | -x | --dump-gc-stats | --dump-memo-graph-format | --print-metrics | --force | -f | --workspace | --debug-package-logs | --debug-load-dir | --debug-backtraces | --action-stdout-on-success | --cache-storage-mode | --verbose | --sandbox | -j | --terminal-persistence | --cache | --cache-check-probability | --action-stderr-on-success | --debug-dependency-path | --debug-artifact-substitution | --debug-digests | --no-buffer | --auto-promote | --watch | -w | --dump-memo-graph | --dump-memo-graph-with-timing | --release | --ignore-lock-dir | --promote-install-files | --default-target | --ignore-promoted-rules | --root | --config-file | --always-show-command-line | --require-dune-project-file | --only-packages | --profile | --build-dir | --trace-file | --no-print-directory | --build-info | --file-watcher | --wait-for-filesystem-clock | --error-reporting | --stop-on-first-error | --context | --format | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_describe__opam-files() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      # This is where we would add completions for positional arguments,
      # however this command has no positional arguments
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --format --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --lang --manpage --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --format)
            # completions for: opam-files describe --format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --error-reporting)
            # completions for: opam-files describe --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: opam-files describe --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: opam-files describe --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: opam-files describe --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: opam-files describe --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: opam-files describe --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: opam-files describe
            # --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: opam-files describe --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: opam-files describe --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: opam-files describe --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: opam-files describe
            # --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: opam-files describe --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: opam-files describe
            # --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: opam-files describe
            # --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: opam-files describe --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: opam-files describe
            # --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: opam-files describe -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: opam-files describe --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: opam-files describe
            # --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: opam-files describe
            # --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: opam-files describe --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: opam-files describe
            # --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: opam-files describe --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: opam-files describe -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: opam-files describe --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: opam-files describe --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: opam-files describe
            # --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --debug-cache)
            # completions for: opam-files describe --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --lang)
            # completions for: opam-files describe --lang
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --format | --stop-on-first-error | --error-reporting | --wait-for-filesystem-clock | --file-watcher | --build-info | --no-print-directory | --trace-file | --build-dir | --profile | --only-packages | --require-dune-project-file | --always-show-command-line | --config-file | --root | --ignore-promoted-rules | --default-target | --promote-install-files | --ignore-lock-dir | --release | --dump-memo-graph-with-timing | --dump-memo-graph | --watch | -w | --auto-promote | --no-buffer | --debug-digests | --debug-artifact-substitution | --debug-dependency-path | --action-stderr-on-success | --cache-check-probability | --cache | --terminal-persistence | -j | --sandbox | --verbose | --cache-storage-mode | --action-stdout-on-success | --debug-backtraces | --debug-load-dir | --debug-package-logs | --workspace | --force | -f | --print-metrics | --dump-memo-graph-format | --dump-gc-stats | -x | --diff-command | --trace-extended | --store-orig-source-dir | --instrument-with | --watch-exclusions | --debug-cache | --display-separate-messages | --lang | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_describe__pp__complete_positional_args() {
  # Takes the portion of the word under the cursor before the cursor and the
  # index of the current positional argument on the command line and adds comp
  # replies for that positional argument begining with that prefix.
  case "$2" in
    0)
      _dune_add_reply_files "$1"
      ;;
  esac
}

_dune_describe__pp() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      _dune_describe__pp__complete_positional_args "$2" "$positional_argument_index"
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --context --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --lang --manpage --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --lang)
            # completions for: pp describe --lang
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --debug-cache)
            # completions for: pp describe --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: pp describe --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: pp describe --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: pp describe --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: pp describe -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: pp describe --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: pp describe --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: pp describe --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: pp describe
            # --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: pp describe --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: pp describe --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: pp describe -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: pp describe --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: pp describe --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: pp describe --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: pp describe
            # --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: pp describe --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: pp describe --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: pp describe --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: pp describe --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: pp describe --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: pp describe
            # --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: pp describe --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: pp describe --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: pp describe --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: pp describe --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: pp describe --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --error-reporting)
            # completions for: pp describe --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --context)
            # completions for: pp describe --context
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --lang | --display-separate-messages | --debug-cache | --watch-exclusions | --instrument-with | --store-orig-source-dir | --trace-extended | --diff-command | -x | --dump-gc-stats | --dump-memo-graph-format | --print-metrics | --force | -f | --workspace | --debug-package-logs | --debug-load-dir | --debug-backtraces | --action-stdout-on-success | --cache-storage-mode | --verbose | --sandbox | -j | --terminal-persistence | --cache | --cache-check-probability | --action-stderr-on-success | --debug-dependency-path | --debug-artifact-substitution | --debug-digests | --no-buffer | --auto-promote | --watch | -w | --dump-memo-graph | --dump-memo-graph-with-timing | --release | --ignore-lock-dir | --promote-install-files | --default-target | --ignore-promoted-rules | --root | --config-file | --always-show-command-line | --require-dune-project-file | --only-packages | --profile | --build-dir | --trace-file | --no-print-directory | --build-info | --file-watcher | --wait-for-filesystem-clock | --error-reporting | --stop-on-first-error | --context | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_describe__env__complete_positional_args() {
  # Takes the portion of the word under the cursor before the cursor and the
  # index of the current positional argument on the command line and adds comp
  # replies for that positional argument begining with that prefix.
  case "$2" in
    0)
      _dune_add_reply_files "$1"
      ;;
  esac
}

_dune_describe__env() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      _dune_describe__env__complete_positional_args "$2" "$positional_argument_index"
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --field --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --manpage --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --error-reporting)
            # completions for: env describe --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: env describe --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: env describe --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: env describe --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: env describe --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: env describe --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: env describe
            # --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: env describe --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: env describe --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: env describe --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: env describe --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: env describe --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: env describe
            # --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: env describe
            # --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: env describe --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: env describe --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: env describe -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: env describe --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: env describe --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: env describe
            # --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: env describe --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: env describe --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: env describe --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: env describe -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: env describe --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: env describe --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: env describe --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --debug-cache)
            # completions for: env describe --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --field)
            # completions for: env describe --field
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --stop-on-first-error | --error-reporting | --wait-for-filesystem-clock | --file-watcher | --build-info | --no-print-directory | --trace-file | --build-dir | --profile | --only-packages | --require-dune-project-file | --always-show-command-line | --config-file | --root | --ignore-promoted-rules | --default-target | --promote-install-files | --ignore-lock-dir | --release | --dump-memo-graph-with-timing | --dump-memo-graph | --watch | -w | --auto-promote | --no-buffer | --debug-digests | --debug-artifact-substitution | --debug-dependency-path | --action-stderr-on-success | --cache-check-probability | --cache | --terminal-persistence | -j | --sandbox | --verbose | --cache-storage-mode | --action-stdout-on-success | --debug-backtraces | --debug-load-dir | --debug-package-logs | --workspace | --force | -f | --print-metrics | --dump-memo-graph-format | --dump-gc-stats | -x | --diff-command | --trace-extended | --store-orig-source-dir | --instrument-with | --watch-exclusions | --debug-cache | --display-separate-messages | --field | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_describe__rules__complete_positional_args() {
  # Takes the portion of the word under the cursor before the cursor and the
  # index of the current positional argument on the command line and adds comp
  # replies for that positional argument begining with that prefix.
  case "$2" in
    *)
      _dune_add_reply_files "$1"
      ;;
  esac
}

_dune_describe__rules() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      _dune_describe__rules__complete_positional_args "$2" "$positional_argument_index"
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --makefile --manpage --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --recursive --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -m -o -r -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          -o)
            # completions for: rules describe -o
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --error-reporting)
            # completions for: rules describe --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: rules describe --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: rules describe --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: rules describe --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: rules describe --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: rules describe --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: rules describe
            # --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: rules describe --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: rules describe --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: rules describe --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: rules describe
            # --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: rules describe --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: rules describe
            # --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: rules describe
            # --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: rules describe --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: rules describe --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: rules describe -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: rules describe --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: rules describe --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: rules describe
            # --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: rules describe --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: rules describe
            # --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: rules describe --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: rules describe -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: rules describe --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: rules describe --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: rules describe --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --debug-cache)
            # completions for: rules describe --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | -m | --makefile | -o | --stop-on-first-error | --error-reporting | --wait-for-filesystem-clock | --file-watcher | --build-info | --no-print-directory | --trace-file | --build-dir | --profile | --only-packages | --require-dune-project-file | --always-show-command-line | --config-file | --root | --ignore-promoted-rules | --default-target | --promote-install-files | --ignore-lock-dir | --release | --dump-memo-graph-with-timing | --dump-memo-graph | --watch | -w | --auto-promote | --no-buffer | --debug-digests | --debug-artifact-substitution | --debug-dependency-path | --action-stderr-on-success | --cache-check-probability | --cache | --terminal-persistence | -j | --sandbox | --verbose | --cache-storage-mode | --action-stdout-on-success | --debug-backtraces | --debug-load-dir | --debug-package-logs | --workspace | --force | -f | --print-metrics | --dump-memo-graph-format | --dump-gc-stats | -x | --diff-command | --trace-extended | --store-orig-source-dir | --instrument-with | --watch-exclusions | --debug-cache | --display-separate-messages | -r | --recursive | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_describe__installed-libraries() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      # This is where we would add completions for positional arguments,
      # however this command has no positional arguments
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --manpage --na --no-buffer --no-print-directory --not-available --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --debug-cache)
            # completions for: installed-libraries describe
            # --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: installed-libraries describe
            # --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: installed-libraries describe
            # --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: installed-libraries describe
            # --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: installed-libraries describe -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: installed-libraries describe
            # --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: installed-libraries describe
            # --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: installed-libraries describe
            # --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: installed-libraries describe
            # --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: installed-libraries describe
            # --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: installed-libraries describe
            # --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: installed-libraries describe -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: installed-libraries describe
            # --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: installed-libraries describe --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: installed-libraries describe
            # --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: installed-libraries describe
            # --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: installed-libraries describe
            # --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: installed-libraries describe
            # --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: installed-libraries describe
            # --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: installed-libraries describe --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: installed-libraries describe
            # --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: installed-libraries describe
            # --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: installed-libraries describe
            # --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: installed-libraries describe
            # --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: installed-libraries describe
            # --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: installed-libraries describe
            # --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: installed-libraries describe
            # --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --error-reporting)
            # completions for: installed-libraries describe
            # --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --display-separate-messages | --debug-cache | --watch-exclusions | --instrument-with | --store-orig-source-dir | --trace-extended | --diff-command | -x | --dump-gc-stats | --dump-memo-graph-format | --print-metrics | --force | -f | --workspace | --debug-package-logs | --debug-load-dir | --debug-backtraces | --action-stdout-on-success | --cache-storage-mode | --verbose | --sandbox | -j | --terminal-persistence | --cache | --cache-check-probability | --action-stderr-on-success | --debug-dependency-path | --debug-artifact-substitution | --debug-digests | --no-buffer | --auto-promote | --watch | -w | --dump-memo-graph | --dump-memo-graph-with-timing | --release | --ignore-lock-dir | --promote-install-files | --default-target | --ignore-promoted-rules | --root | --config-file | --always-show-command-line | --require-dune-project-file | --only-packages | --profile | --build-dir | --trace-file | --no-print-directory | --build-info | --file-watcher | --wait-for-filesystem-clock | --error-reporting | --stop-on-first-error | --na | --not-available | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_describe__targets__complete_positional_args() {
  # Takes the portion of the word under the cursor before the cursor and the
  # index of the current positional argument on the command line and adds comp
  # replies for that positional argument begining with that prefix.
  case "$2" in
    *)
      _dune_add_reply_files "$1"
      ;;
  esac
}

_dune_describe__targets() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      _dune_describe__targets__complete_positional_args "$2" "$positional_argument_index"
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --context --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --manpage --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --error-reporting)
            # completions for: targets describe --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: targets describe --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: targets describe --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: targets describe --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: targets describe --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: targets describe --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: targets describe
            # --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: targets describe --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: targets describe --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: targets describe --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: targets describe
            # --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: targets describe --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: targets describe
            # --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: targets describe
            # --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: targets describe --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: targets describe
            # --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: targets describe -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: targets describe --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: targets describe --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: targets describe
            # --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: targets describe --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: targets describe
            # --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: targets describe --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: targets describe -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: targets describe --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: targets describe --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: targets describe --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --debug-cache)
            # completions for: targets describe --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --context)
            # completions for: targets describe --context
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --stop-on-first-error | --error-reporting | --wait-for-filesystem-clock | --file-watcher | --build-info | --no-print-directory | --trace-file | --build-dir | --profile | --only-packages | --require-dune-project-file | --always-show-command-line | --config-file | --root | --ignore-promoted-rules | --default-target | --promote-install-files | --ignore-lock-dir | --release | --dump-memo-graph-with-timing | --dump-memo-graph | --watch | -w | --auto-promote | --no-buffer | --debug-digests | --debug-artifact-substitution | --debug-dependency-path | --action-stderr-on-success | --cache-check-probability | --cache | --terminal-persistence | -j | --sandbox | --verbose | --cache-storage-mode | --action-stdout-on-success | --debug-backtraces | --debug-load-dir | --debug-package-logs | --workspace | --force | -f | --print-metrics | --dump-memo-graph-format | --dump-gc-stats | -x | --diff-command | --trace-extended | --store-orig-source-dir | --instrument-with | --watch-exclusions | --debug-cache | --display-separate-messages | --context | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_describe__aliases__complete_positional_args() {
  # Takes the portion of the word under the cursor before the cursor and the
  # index of the current positional argument on the command line and adds comp
  # replies for that positional argument begining with that prefix.
  case "$2" in
    *)
      _dune_add_reply_files "$1"
      ;;
  esac
}

_dune_describe__aliases() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      _dune_describe__aliases__complete_positional_args "$2" "$positional_argument_index"
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --context --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --manpage --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --error-reporting)
            # completions for: aliases describe --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: aliases describe --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: aliases describe --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: aliases describe --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: aliases describe --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: aliases describe --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: aliases describe
            # --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: aliases describe --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: aliases describe --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: aliases describe --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: aliases describe
            # --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: aliases describe --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: aliases describe
            # --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: aliases describe
            # --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: aliases describe --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: aliases describe
            # --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: aliases describe -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: aliases describe --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: aliases describe --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: aliases describe
            # --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: aliases describe --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: aliases describe
            # --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: aliases describe --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: aliases describe -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: aliases describe --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: aliases describe --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: aliases describe --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --debug-cache)
            # completions for: aliases describe --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --context)
            # completions for: aliases describe --context
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --stop-on-first-error | --error-reporting | --wait-for-filesystem-clock | --file-watcher | --build-info | --no-print-directory | --trace-file | --build-dir | --profile | --only-packages | --require-dune-project-file | --always-show-command-line | --config-file | --root | --ignore-promoted-rules | --default-target | --promote-install-files | --ignore-lock-dir | --release | --dump-memo-graph-with-timing | --dump-memo-graph | --watch | -w | --auto-promote | --no-buffer | --debug-digests | --debug-artifact-substitution | --debug-dependency-path | --action-stderr-on-success | --cache-check-probability | --cache | --terminal-persistence | -j | --sandbox | --verbose | --cache-storage-mode | --action-stdout-on-success | --debug-backtraces | --debug-load-dir | --debug-package-logs | --workspace | --force | -f | --print-metrics | --dump-memo-graph-format | --dump-gc-stats | -x | --diff-command | --trace-extended | --store-orig-source-dir | --instrument-with | --watch-exclusions | --debug-cache | --display-separate-messages | --context | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_describe__package-entries() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      # This is where we would add completions for positional arguments,
      # however this command has no positional arguments
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --context --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --format --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --manpage --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --context)
            # completions for: package-entries describe --context
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --error-reporting)
            # completions for: package-entries describe
            # --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: package-entries describe
            # --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: package-entries describe --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: package-entries describe --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: package-entries describe --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: package-entries describe
            # --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: package-entries describe
            # --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: package-entries describe
            # --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: package-entries describe --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: package-entries describe
            # --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: package-entries describe
            # --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: package-entries describe
            # --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: package-entries describe
            # --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: package-entries describe
            # --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: package-entries describe --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: package-entries describe
            # --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: package-entries describe -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: package-entries describe --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: package-entries describe
            # --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: package-entries describe
            # --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: package-entries describe --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: package-entries describe
            # --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: package-entries describe
            # --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: package-entries describe -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: package-entries describe
            # --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: package-entries describe
            # --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: package-entries describe
            # --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --debug-cache)
            # completions for: package-entries describe
            # --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --format)
            # completions for: package-entries describe --format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --context | --stop-on-first-error | --error-reporting | --wait-for-filesystem-clock | --file-watcher | --build-info | --no-print-directory | --trace-file | --build-dir | --profile | --only-packages | --require-dune-project-file | --always-show-command-line | --config-file | --root | --ignore-promoted-rules | --default-target | --promote-install-files | --ignore-lock-dir | --release | --dump-memo-graph-with-timing | --dump-memo-graph | --watch | -w | --auto-promote | --no-buffer | --debug-digests | --debug-artifact-substitution | --debug-dependency-path | --action-stderr-on-success | --cache-check-probability | --cache | --terminal-persistence | -j | --sandbox | --verbose | --cache-storage-mode | --action-stdout-on-success | --debug-backtraces | --debug-load-dir | --debug-package-logs | --workspace | --force | -f | --print-metrics | --dump-memo-graph-format | --dump-gc-stats | -x | --diff-command | --trace-extended | --store-orig-source-dir | --instrument-with | --watch-exclusions | --debug-cache | --display-separate-messages | --format | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_describe__pkg__lock__complete_positional_args() {
  # Takes the portion of the word under the cursor before the cursor and the
  # index of the current positional argument on the command line and adds comp
  # replies for that positional argument begining with that prefix.
  case "$2" in
    *)
      _dune_add_reply_files "$1"
      ;;
  esac
}

_dune_describe__pkg__lock() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      _dune_describe__pkg__lock__complete_positional_args "$2" "$positional_argument_index"
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --manpage --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --debug-cache)
            # completions for: lock pkg describe --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: lock pkg describe --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: lock pkg describe --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: lock pkg describe --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: lock pkg describe -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: lock pkg describe --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: lock pkg describe
            # --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: lock pkg describe --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: lock pkg describe
            # --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: lock pkg describe
            # --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: lock pkg describe --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: lock pkg describe -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: lock pkg describe
            # --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: lock pkg describe --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: lock pkg describe
            # --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: lock pkg describe
            # --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: lock pkg describe --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: lock pkg describe
            # --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: lock pkg describe --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: lock pkg describe --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: lock pkg describe --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: lock pkg describe
            # --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: lock pkg describe --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: lock pkg describe --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: lock pkg describe --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: lock pkg describe --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: lock pkg describe --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --error-reporting)
            # completions for: lock pkg describe --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --display-separate-messages | --debug-cache | --watch-exclusions | --instrument-with | --store-orig-source-dir | --trace-extended | --diff-command | -x | --dump-gc-stats | --dump-memo-graph-format | --print-metrics | --force | -f | --workspace | --debug-package-logs | --debug-load-dir | --debug-backtraces | --action-stdout-on-success | --cache-storage-mode | --verbose | --sandbox | -j | --terminal-persistence | --cache | --cache-check-probability | --action-stderr-on-success | --debug-dependency-path | --debug-artifact-substitution | --debug-digests | --no-buffer | --auto-promote | --watch | -w | --dump-memo-graph | --dump-memo-graph-with-timing | --release | --ignore-lock-dir | --promote-install-files | --default-target | --ignore-promoted-rules | --root | --config-file | --always-show-command-line | --require-dune-project-file | --only-packages | --profile | --build-dir | --trace-file | --no-print-directory | --build-info | --file-watcher | --wait-for-filesystem-clock | --error-reporting | --stop-on-first-error | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_describe__pkg__list-locked-dependencies__complete_positional_args() {
  # Takes the portion of the word under the cursor before the cursor and the
  # index of the current positional argument on the command line and adds comp
  # replies for that positional argument begining with that prefix.
  case "$2" in
    *)
      _dune_add_reply_files "$1"
      ;;
  esac
}

_dune_describe__pkg__list-locked-dependencies() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      _dune_describe__pkg__list-locked-dependencies__complete_positional_args "$2" "$positional_argument_index"
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --manpage --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --transitive --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --error-reporting)
            # completions for: list-locked-dependencies pkg describe
            # --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: list-locked-dependencies pkg describe
            # --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: list-locked-dependencies pkg describe
            # --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: list-locked-dependencies pkg describe
            # --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: list-locked-dependencies pkg describe
            # --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: list-locked-dependencies pkg describe
            # --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: list-locked-dependencies pkg describe
            # --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: list-locked-dependencies pkg describe
            # --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: list-locked-dependencies pkg describe
            # --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: list-locked-dependencies pkg describe
            # --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: list-locked-dependencies pkg describe
            # --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: list-locked-dependencies pkg describe
            # --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: list-locked-dependencies pkg describe
            # --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: list-locked-dependencies pkg describe
            # --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: list-locked-dependencies pkg describe
            # --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: list-locked-dependencies pkg describe
            # --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: list-locked-dependencies pkg describe
            # -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: list-locked-dependencies pkg describe
            # --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: list-locked-dependencies pkg describe
            # --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: list-locked-dependencies pkg describe
            # --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: list-locked-dependencies pkg describe
            # --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: list-locked-dependencies pkg describe
            # --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: list-locked-dependencies pkg describe
            # --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: list-locked-dependencies pkg describe
            # -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: list-locked-dependencies pkg describe
            # --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: list-locked-dependencies pkg describe
            # --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: list-locked-dependencies pkg describe
            # --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --debug-cache)
            # completions for: list-locked-dependencies pkg describe
            # --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --transitive | --stop-on-first-error | --error-reporting | --wait-for-filesystem-clock | --file-watcher | --build-info | --no-print-directory | --trace-file | --build-dir | --profile | --only-packages | --require-dune-project-file | --always-show-command-line | --config-file | --root | --ignore-promoted-rules | --default-target | --promote-install-files | --ignore-lock-dir | --release | --dump-memo-graph-with-timing | --dump-memo-graph | --watch | -w | --auto-promote | --no-buffer | --debug-digests | --debug-artifact-substitution | --debug-dependency-path | --action-stderr-on-success | --cache-check-probability | --cache | --terminal-persistence | -j | --sandbox | --verbose | --cache-storage-mode | --action-stdout-on-success | --debug-backtraces | --debug-load-dir | --debug-package-logs | --workspace | --force | -f | --print-metrics | --dump-memo-graph-format | --dump-gc-stats | -x | --diff-command | --trace-extended | --store-orig-source-dir | --instrument-with | --watch-exclusions | --debug-cache | --display-separate-messages | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_describe__pkg__dependency-hash() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      # This is where we would add completions for positional arguments,
      # however this command has no positional arguments
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --manpage --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --error-reporting)
            # completions for: dependency-hash pkg describe
            # --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: dependency-hash pkg describe
            # --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: dependency-hash pkg describe
            # --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: dependency-hash pkg describe
            # --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: dependency-hash pkg describe
            # --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: dependency-hash pkg describe
            # --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: dependency-hash pkg describe
            # --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: dependency-hash pkg describe
            # --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: dependency-hash pkg describe --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: dependency-hash pkg describe
            # --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: dependency-hash pkg describe
            # --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: dependency-hash pkg describe
            # --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: dependency-hash pkg describe
            # --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: dependency-hash pkg describe
            # --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: dependency-hash pkg describe --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: dependency-hash pkg describe
            # --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: dependency-hash pkg describe -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: dependency-hash pkg describe
            # --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: dependency-hash pkg describe
            # --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: dependency-hash pkg describe
            # --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: dependency-hash pkg describe
            # --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: dependency-hash pkg describe
            # --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: dependency-hash pkg describe
            # --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: dependency-hash pkg describe -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: dependency-hash pkg describe
            # --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: dependency-hash pkg describe
            # --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: dependency-hash pkg describe
            # --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --debug-cache)
            # completions for: dependency-hash pkg describe
            # --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --stop-on-first-error | --error-reporting | --wait-for-filesystem-clock | --file-watcher | --build-info | --no-print-directory | --trace-file | --build-dir | --profile | --only-packages | --require-dune-project-file | --always-show-command-line | --config-file | --root | --ignore-promoted-rules | --default-target | --promote-install-files | --ignore-lock-dir | --release | --dump-memo-graph-with-timing | --dump-memo-graph | --watch | -w | --auto-promote | --no-buffer | --debug-digests | --debug-artifact-substitution | --debug-dependency-path | --action-stderr-on-success | --cache-check-probability | --cache | --terminal-persistence | -j | --sandbox | --verbose | --cache-storage-mode | --action-stdout-on-success | --debug-backtraces | --debug-load-dir | --debug-package-logs | --workspace | --force | -f | --print-metrics | --dump-memo-graph-format | --dump-gc-stats | -x | --diff-command | --trace-extended | --store-orig-source-dir | --instrument-with | --watch-exclusions | --debug-cache | --display-separate-messages | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_describe__pkg() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      _dune_add_reply_fixed "$2" "lock list-locked-dependencies dependency-hash"
      # This is where we would add completions for positional arguments,
      # however this command has no positional arguments
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--help --manpage -h"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
        esac
      fi
      case "$current_word" in
        --help | -h | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        lock)
          _dune_describe__pkg__lock "$1" "$2" "$3"
          return "$?"
          ;;
        list-locked-dependencies)
          _dune_describe__pkg__list-locked-dependencies "$1" "$2" "$3"
          return "$?"
          ;;
        dependency-hash)
          _dune_describe__pkg__dependency-hash "$1" "$2" "$3"
          return "$?"
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_describe__contexts() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      # This is where we would add completions for positional arguments,
      # however this command has no positional arguments
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --manpage --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --error-reporting)
            # completions for: contexts describe --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: contexts describe --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: contexts describe --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: contexts describe --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: contexts describe --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: contexts describe --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: contexts describe
            # --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: contexts describe --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: contexts describe --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: contexts describe --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: contexts describe
            # --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: contexts describe --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: contexts describe
            # --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: contexts describe
            # --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: contexts describe --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: contexts describe
            # --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: contexts describe -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: contexts describe --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: contexts describe
            # --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: contexts describe
            # --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: contexts describe --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: contexts describe
            # --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: contexts describe --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: contexts describe -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: contexts describe --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: contexts describe --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: contexts describe --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --debug-cache)
            # completions for: contexts describe --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --stop-on-first-error | --error-reporting | --wait-for-filesystem-clock | --file-watcher | --build-info | --no-print-directory | --trace-file | --build-dir | --profile | --only-packages | --require-dune-project-file | --always-show-command-line | --config-file | --root | --ignore-promoted-rules | --default-target | --promote-install-files | --ignore-lock-dir | --release | --dump-memo-graph-with-timing | --dump-memo-graph | --watch | -w | --auto-promote | --no-buffer | --debug-digests | --debug-artifact-substitution | --debug-dependency-path | --action-stderr-on-success | --cache-check-probability | --cache | --terminal-persistence | -j | --sandbox | --verbose | --cache-storage-mode | --action-stdout-on-success | --debug-backtraces | --debug-load-dir | --debug-package-logs | --workspace | --force | -f | --print-metrics | --dump-memo-graph-format | --dump-gc-stats | -x | --diff-command | --trace-extended | --store-orig-source-dir | --instrument-with | --watch-exclusions | --debug-cache | --display-separate-messages | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_describe__depexts__complete_positional_args() {
  # Takes the portion of the word under the cursor before the cursor and the
  # index of the current positional argument on the command line and adds comp
  # replies for that positional argument begining with that prefix.
  case "$2" in
    *)
      _dune_add_reply_files "$1"
      ;;
  esac
}

_dune_describe__depexts() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      _dune_describe__depexts__complete_positional_args "$2" "$positional_argument_index"
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --manpage --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --debug-cache)
            # completions for: depexts describe --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: depexts describe --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: depexts describe --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: depexts describe --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: depexts describe -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: depexts describe --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: depexts describe
            # --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: depexts describe --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: depexts describe
            # --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: depexts describe --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: depexts describe --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: depexts describe -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: depexts describe
            # --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: depexts describe --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: depexts describe
            # --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: depexts describe
            # --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: depexts describe --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: depexts describe
            # --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: depexts describe --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: depexts describe --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: depexts describe --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: depexts describe
            # --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: depexts describe --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: depexts describe --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: depexts describe --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: depexts describe --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: depexts describe --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --error-reporting)
            # completions for: depexts describe --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --display-separate-messages | --debug-cache | --watch-exclusions | --instrument-with | --store-orig-source-dir | --trace-extended | --diff-command | -x | --dump-gc-stats | --dump-memo-graph-format | --print-metrics | --force | -f | --workspace | --debug-package-logs | --debug-load-dir | --debug-backtraces | --action-stdout-on-success | --cache-storage-mode | --verbose | --sandbox | -j | --terminal-persistence | --cache | --cache-check-probability | --action-stderr-on-success | --debug-dependency-path | --debug-artifact-substitution | --debug-digests | --no-buffer | --auto-promote | --watch | -w | --dump-memo-graph | --dump-memo-graph-with-timing | --release | --ignore-lock-dir | --promote-install-files | --default-target | --ignore-promoted-rules | --root | --config-file | --always-show-command-line | --require-dune-project-file | --only-packages | --profile | --build-dir | --trace-file | --no-print-directory | --build-info | --file-watcher | --wait-for-filesystem-clock | --error-reporting | --stop-on-first-error | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_describe__complete_positional_args() {
  # Takes the portion of the word under the cursor before the cursor and the
  # index of the current positional argument on the command line and adds comp
  # replies for that positional argument begining with that prefix.
  case "$2" in
    *)
      _dune_add_reply_files "$1"
      ;;
  esac
}

_dune_describe() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      _dune_add_reply_fixed "$2" "workspace external-lib-deps opam-files pp env rules installed-libraries targets aliases package-entries pkg contexts depexts"
      _dune_describe__complete_positional_args "$2" "$positional_argument_index"
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --context --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --format --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --lang --manpage --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --sanitize-for-tests --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --with-deps --with-pps --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --lang)
            # completions for: describe --lang
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --context)
            # completions for: describe --context
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --debug-cache)
            # completions for: describe --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: describe --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: describe --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: describe --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: describe -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: describe --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: describe --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: describe --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: describe --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: describe --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: describe --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: describe -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: describe --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: describe --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: describe --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: describe --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: describe --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: describe --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: describe --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: describe --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: describe --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: describe --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: describe --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: describe --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: describe --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: describe --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: describe --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --error-reporting)
            # completions for: describe --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --format)
            # completions for: describe --format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --lang | --context | --display-separate-messages | --debug-cache | --watch-exclusions | --instrument-with | --store-orig-source-dir | --trace-extended | --diff-command | -x | --dump-gc-stats | --dump-memo-graph-format | --print-metrics | --force | -f | --workspace | --debug-package-logs | --debug-load-dir | --debug-backtraces | --action-stdout-on-success | --cache-storage-mode | --verbose | --sandbox | -j | --terminal-persistence | --cache | --cache-check-probability | --action-stderr-on-success | --debug-dependency-path | --debug-artifact-substitution | --debug-digests | --no-buffer | --auto-promote | --watch | -w | --dump-memo-graph | --dump-memo-graph-with-timing | --release | --ignore-lock-dir | --promote-install-files | --default-target | --ignore-promoted-rules | --root | --config-file | --always-show-command-line | --require-dune-project-file | --only-packages | --profile | --build-dir | --trace-file | --no-print-directory | --build-info | --file-watcher | --wait-for-filesystem-clock | --error-reporting | --stop-on-first-error | --format | --with-pps | --with-deps | --sanitize-for-tests | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        workspace)
          _dune_describe__workspace "$1" "$2" "$3"
          return "$?"
          ;;
        external-lib-deps)
          _dune_describe__external-lib-deps "$1" "$2" "$3"
          return "$?"
          ;;
        opam-files)
          _dune_describe__opam-files "$1" "$2" "$3"
          return "$?"
          ;;
        pp)
          _dune_describe__pp "$1" "$2" "$3"
          return "$?"
          ;;
        env)
          _dune_describe__env "$1" "$2" "$3"
          return "$?"
          ;;
        rules)
          _dune_describe__rules "$1" "$2" "$3"
          return "$?"
          ;;
        installed-libraries)
          _dune_describe__installed-libraries "$1" "$2" "$3"
          return "$?"
          ;;
        targets)
          _dune_describe__targets "$1" "$2" "$3"
          return "$?"
          ;;
        aliases)
          _dune_describe__aliases "$1" "$2" "$3"
          return "$?"
          ;;
        package-entries)
          _dune_describe__package-entries "$1" "$2" "$3"
          return "$?"
          ;;
        pkg)
          _dune_describe__pkg "$1" "$2" "$3"
          return "$?"
          ;;
        contexts)
          _dune_describe__contexts "$1" "$2" "$3"
          return "$?"
          ;;
        depexts)
          _dune_describe__depexts "$1" "$2" "$3"
          return "$?"
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_show__workspace__complete_positional_args() {
  # Takes the portion of the word under the cursor before the cursor and the
  # index of the current positional argument on the command line and adds comp
  # replies for that positional argument begining with that prefix.
  case "$2" in
    *)
      _dune_add_reply_files "$1"
      ;;
  esac
}

_dune_show__workspace() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      _dune_show__workspace__complete_positional_args "$2" "$positional_argument_index"
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --context --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --format --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --lang --manpage --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --sanitize-for-tests --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --with-deps --with-pps --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --lang)
            # completions for: workspace show --lang
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --context)
            # completions for: workspace show --context
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --debug-cache)
            # completions for: workspace show --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: workspace show --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: workspace show --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: workspace show --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: workspace show -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: workspace show --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: workspace show
            # --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: workspace show --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: workspace show
            # --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: workspace show --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: workspace show --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: workspace show -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: workspace show --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: workspace show --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: workspace show
            # --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: workspace show
            # --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: workspace show --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: workspace show
            # --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: workspace show --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: workspace show --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: workspace show --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: workspace show
            # --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: workspace show --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: workspace show --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: workspace show --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: workspace show --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: workspace show --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --error-reporting)
            # completions for: workspace show --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --format)
            # completions for: workspace show --format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --lang | --context | --display-separate-messages | --debug-cache | --watch-exclusions | --instrument-with | --store-orig-source-dir | --trace-extended | --diff-command | -x | --dump-gc-stats | --dump-memo-graph-format | --print-metrics | --force | -f | --workspace | --debug-package-logs | --debug-load-dir | --debug-backtraces | --action-stdout-on-success | --cache-storage-mode | --verbose | --sandbox | -j | --terminal-persistence | --cache | --cache-check-probability | --action-stderr-on-success | --debug-dependency-path | --debug-artifact-substitution | --debug-digests | --no-buffer | --auto-promote | --watch | -w | --dump-memo-graph | --dump-memo-graph-with-timing | --release | --ignore-lock-dir | --promote-install-files | --default-target | --ignore-promoted-rules | --root | --config-file | --always-show-command-line | --require-dune-project-file | --only-packages | --profile | --build-dir | --trace-file | --no-print-directory | --build-info | --file-watcher | --wait-for-filesystem-clock | --error-reporting | --stop-on-first-error | --format | --with-pps | --with-deps | --sanitize-for-tests | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_show__external-lib-deps() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      # This is where we would add completions for positional arguments,
      # however this command has no positional arguments
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --context --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --format --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --lang --manpage --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --lang)
            # completions for: external-lib-deps show --lang
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --debug-cache)
            # completions for: external-lib-deps show --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: external-lib-deps show
            # --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: external-lib-deps show
            # --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: external-lib-deps show --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: external-lib-deps show -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: external-lib-deps show
            # --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: external-lib-deps show
            # --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: external-lib-deps show --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: external-lib-deps show
            # --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: external-lib-deps show
            # --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: external-lib-deps show --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: external-lib-deps show -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: external-lib-deps show
            # --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: external-lib-deps show --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: external-lib-deps show
            # --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: external-lib-deps show
            # --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: external-lib-deps show
            # --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: external-lib-deps show
            # --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: external-lib-deps show
            # --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: external-lib-deps show --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: external-lib-deps show --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: external-lib-deps show
            # --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: external-lib-deps show
            # --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: external-lib-deps show --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: external-lib-deps show --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: external-lib-deps show --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: external-lib-deps show --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --error-reporting)
            # completions for: external-lib-deps show
            # --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --context)
            # completions for: external-lib-deps show --context
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --format)
            # completions for: external-lib-deps show --format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --lang | --display-separate-messages | --debug-cache | --watch-exclusions | --instrument-with | --store-orig-source-dir | --trace-extended | --diff-command | -x | --dump-gc-stats | --dump-memo-graph-format | --print-metrics | --force | -f | --workspace | --debug-package-logs | --debug-load-dir | --debug-backtraces | --action-stdout-on-success | --cache-storage-mode | --verbose | --sandbox | -j | --terminal-persistence | --cache | --cache-check-probability | --action-stderr-on-success | --debug-dependency-path | --debug-artifact-substitution | --debug-digests | --no-buffer | --auto-promote | --watch | -w | --dump-memo-graph | --dump-memo-graph-with-timing | --release | --ignore-lock-dir | --promote-install-files | --default-target | --ignore-promoted-rules | --root | --config-file | --always-show-command-line | --require-dune-project-file | --only-packages | --profile | --build-dir | --trace-file | --no-print-directory | --build-info | --file-watcher | --wait-for-filesystem-clock | --error-reporting | --stop-on-first-error | --context | --format | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_show__opam-files() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      # This is where we would add completions for positional arguments,
      # however this command has no positional arguments
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --format --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --lang --manpage --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --format)
            # completions for: opam-files show --format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --error-reporting)
            # completions for: opam-files show --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: opam-files show --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: opam-files show --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: opam-files show --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: opam-files show --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: opam-files show --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: opam-files show
            # --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: opam-files show --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: opam-files show --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: opam-files show --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: opam-files show
            # --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: opam-files show --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: opam-files show
            # --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: opam-files show
            # --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: opam-files show --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: opam-files show
            # --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: opam-files show -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: opam-files show --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: opam-files show --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: opam-files show
            # --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: opam-files show --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: opam-files show
            # --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: opam-files show --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: opam-files show -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: opam-files show --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: opam-files show --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: opam-files show --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --debug-cache)
            # completions for: opam-files show --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --lang)
            # completions for: opam-files show --lang
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --format | --stop-on-first-error | --error-reporting | --wait-for-filesystem-clock | --file-watcher | --build-info | --no-print-directory | --trace-file | --build-dir | --profile | --only-packages | --require-dune-project-file | --always-show-command-line | --config-file | --root | --ignore-promoted-rules | --default-target | --promote-install-files | --ignore-lock-dir | --release | --dump-memo-graph-with-timing | --dump-memo-graph | --watch | -w | --auto-promote | --no-buffer | --debug-digests | --debug-artifact-substitution | --debug-dependency-path | --action-stderr-on-success | --cache-check-probability | --cache | --terminal-persistence | -j | --sandbox | --verbose | --cache-storage-mode | --action-stdout-on-success | --debug-backtraces | --debug-load-dir | --debug-package-logs | --workspace | --force | -f | --print-metrics | --dump-memo-graph-format | --dump-gc-stats | -x | --diff-command | --trace-extended | --store-orig-source-dir | --instrument-with | --watch-exclusions | --debug-cache | --display-separate-messages | --lang | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_show__pp__complete_positional_args() {
  # Takes the portion of the word under the cursor before the cursor and the
  # index of the current positional argument on the command line and adds comp
  # replies for that positional argument begining with that prefix.
  case "$2" in
    0)
      _dune_add_reply_files "$1"
      ;;
  esac
}

_dune_show__pp() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      _dune_show__pp__complete_positional_args "$2" "$positional_argument_index"
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --context --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --lang --manpage --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --lang)
            # completions for: pp show --lang
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --debug-cache)
            # completions for: pp show --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: pp show --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: pp show --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: pp show --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: pp show -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: pp show --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: pp show --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: pp show --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: pp show --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: pp show --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: pp show --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: pp show -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: pp show --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: pp show --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: pp show --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: pp show --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: pp show --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: pp show --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: pp show --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: pp show --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: pp show --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: pp show --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: pp show --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: pp show --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: pp show --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: pp show --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: pp show --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --error-reporting)
            # completions for: pp show --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --context)
            # completions for: pp show --context
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --lang | --display-separate-messages | --debug-cache | --watch-exclusions | --instrument-with | --store-orig-source-dir | --trace-extended | --diff-command | -x | --dump-gc-stats | --dump-memo-graph-format | --print-metrics | --force | -f | --workspace | --debug-package-logs | --debug-load-dir | --debug-backtraces | --action-stdout-on-success | --cache-storage-mode | --verbose | --sandbox | -j | --terminal-persistence | --cache | --cache-check-probability | --action-stderr-on-success | --debug-dependency-path | --debug-artifact-substitution | --debug-digests | --no-buffer | --auto-promote | --watch | -w | --dump-memo-graph | --dump-memo-graph-with-timing | --release | --ignore-lock-dir | --promote-install-files | --default-target | --ignore-promoted-rules | --root | --config-file | --always-show-command-line | --require-dune-project-file | --only-packages | --profile | --build-dir | --trace-file | --no-print-directory | --build-info | --file-watcher | --wait-for-filesystem-clock | --error-reporting | --stop-on-first-error | --context | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_show__env__complete_positional_args() {
  # Takes the portion of the word under the cursor before the cursor and the
  # index of the current positional argument on the command line and adds comp
  # replies for that positional argument begining with that prefix.
  case "$2" in
    0)
      _dune_add_reply_files "$1"
      ;;
  esac
}

_dune_show__env() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      _dune_show__env__complete_positional_args "$2" "$positional_argument_index"
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --field --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --manpage --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --error-reporting)
            # completions for: env show --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: env show --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: env show --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: env show --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: env show --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: env show --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: env show --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: env show --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: env show --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: env show --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: env show --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: env show --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: env show --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: env show --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: env show --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: env show --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: env show -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: env show --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: env show --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: env show --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: env show --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: env show --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: env show --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: env show -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: env show --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: env show --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: env show --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --debug-cache)
            # completions for: env show --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --field)
            # completions for: env show --field
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --stop-on-first-error | --error-reporting | --wait-for-filesystem-clock | --file-watcher | --build-info | --no-print-directory | --trace-file | --build-dir | --profile | --only-packages | --require-dune-project-file | --always-show-command-line | --config-file | --root | --ignore-promoted-rules | --default-target | --promote-install-files | --ignore-lock-dir | --release | --dump-memo-graph-with-timing | --dump-memo-graph | --watch | -w | --auto-promote | --no-buffer | --debug-digests | --debug-artifact-substitution | --debug-dependency-path | --action-stderr-on-success | --cache-check-probability | --cache | --terminal-persistence | -j | --sandbox | --verbose | --cache-storage-mode | --action-stdout-on-success | --debug-backtraces | --debug-load-dir | --debug-package-logs | --workspace | --force | -f | --print-metrics | --dump-memo-graph-format | --dump-gc-stats | -x | --diff-command | --trace-extended | --store-orig-source-dir | --instrument-with | --watch-exclusions | --debug-cache | --display-separate-messages | --field | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_show__rules__complete_positional_args() {
  # Takes the portion of the word under the cursor before the cursor and the
  # index of the current positional argument on the command line and adds comp
  # replies for that positional argument begining with that prefix.
  case "$2" in
    *)
      _dune_add_reply_files "$1"
      ;;
  esac
}

_dune_show__rules() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      _dune_show__rules__complete_positional_args "$2" "$positional_argument_index"
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --makefile --manpage --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --recursive --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -m -o -r -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          -o)
            # completions for: rules show -o
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --error-reporting)
            # completions for: rules show --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: rules show --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: rules show --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: rules show --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: rules show --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: rules show --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: rules show
            # --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: rules show --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: rules show --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: rules show --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: rules show --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: rules show --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: rules show --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: rules show --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: rules show --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: rules show --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: rules show -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: rules show --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: rules show --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: rules show --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: rules show --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: rules show --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: rules show --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: rules show -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: rules show --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: rules show --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: rules show --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --debug-cache)
            # completions for: rules show --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | -m | --makefile | -o | --stop-on-first-error | --error-reporting | --wait-for-filesystem-clock | --file-watcher | --build-info | --no-print-directory | --trace-file | --build-dir | --profile | --only-packages | --require-dune-project-file | --always-show-command-line | --config-file | --root | --ignore-promoted-rules | --default-target | --promote-install-files | --ignore-lock-dir | --release | --dump-memo-graph-with-timing | --dump-memo-graph | --watch | -w | --auto-promote | --no-buffer | --debug-digests | --debug-artifact-substitution | --debug-dependency-path | --action-stderr-on-success | --cache-check-probability | --cache | --terminal-persistence | -j | --sandbox | --verbose | --cache-storage-mode | --action-stdout-on-success | --debug-backtraces | --debug-load-dir | --debug-package-logs | --workspace | --force | -f | --print-metrics | --dump-memo-graph-format | --dump-gc-stats | -x | --diff-command | --trace-extended | --store-orig-source-dir | --instrument-with | --watch-exclusions | --debug-cache | --display-separate-messages | -r | --recursive | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_show__installed-libraries() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      # This is where we would add completions for positional arguments,
      # however this command has no positional arguments
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --manpage --na --no-buffer --no-print-directory --not-available --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --debug-cache)
            # completions for: installed-libraries show
            # --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: installed-libraries show
            # --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: installed-libraries show
            # --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: installed-libraries show
            # --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: installed-libraries show -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: installed-libraries show
            # --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: installed-libraries show
            # --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: installed-libraries show --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: installed-libraries show
            # --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: installed-libraries show
            # --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: installed-libraries show --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: installed-libraries show -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: installed-libraries show
            # --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: installed-libraries show --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: installed-libraries show
            # --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: installed-libraries show
            # --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: installed-libraries show
            # --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: installed-libraries show
            # --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: installed-libraries show
            # --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: installed-libraries show --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: installed-libraries show
            # --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: installed-libraries show
            # --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: installed-libraries show
            # --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: installed-libraries show --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: installed-libraries show --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: installed-libraries show --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: installed-libraries show
            # --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --error-reporting)
            # completions for: installed-libraries show
            # --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --display-separate-messages | --debug-cache | --watch-exclusions | --instrument-with | --store-orig-source-dir | --trace-extended | --diff-command | -x | --dump-gc-stats | --dump-memo-graph-format | --print-metrics | --force | -f | --workspace | --debug-package-logs | --debug-load-dir | --debug-backtraces | --action-stdout-on-success | --cache-storage-mode | --verbose | --sandbox | -j | --terminal-persistence | --cache | --cache-check-probability | --action-stderr-on-success | --debug-dependency-path | --debug-artifact-substitution | --debug-digests | --no-buffer | --auto-promote | --watch | -w | --dump-memo-graph | --dump-memo-graph-with-timing | --release | --ignore-lock-dir | --promote-install-files | --default-target | --ignore-promoted-rules | --root | --config-file | --always-show-command-line | --require-dune-project-file | --only-packages | --profile | --build-dir | --trace-file | --no-print-directory | --build-info | --file-watcher | --wait-for-filesystem-clock | --error-reporting | --stop-on-first-error | --na | --not-available | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_show__targets__complete_positional_args() {
  # Takes the portion of the word under the cursor before the cursor and the
  # index of the current positional argument on the command line and adds comp
  # replies for that positional argument begining with that prefix.
  case "$2" in
    *)
      _dune_add_reply_files "$1"
      ;;
  esac
}

_dune_show__targets() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      _dune_show__targets__complete_positional_args "$2" "$positional_argument_index"
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --context --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --manpage --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --error-reporting)
            # completions for: targets show --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: targets show --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: targets show --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: targets show --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: targets show --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: targets show --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: targets show
            # --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: targets show --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: targets show --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: targets show --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: targets show --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: targets show --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: targets show
            # --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: targets show
            # --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: targets show --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: targets show --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: targets show -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: targets show --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: targets show --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: targets show
            # --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: targets show --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: targets show --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: targets show --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: targets show -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: targets show --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: targets show --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: targets show --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --debug-cache)
            # completions for: targets show --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --context)
            # completions for: targets show --context
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --stop-on-first-error | --error-reporting | --wait-for-filesystem-clock | --file-watcher | --build-info | --no-print-directory | --trace-file | --build-dir | --profile | --only-packages | --require-dune-project-file | --always-show-command-line | --config-file | --root | --ignore-promoted-rules | --default-target | --promote-install-files | --ignore-lock-dir | --release | --dump-memo-graph-with-timing | --dump-memo-graph | --watch | -w | --auto-promote | --no-buffer | --debug-digests | --debug-artifact-substitution | --debug-dependency-path | --action-stderr-on-success | --cache-check-probability | --cache | --terminal-persistence | -j | --sandbox | --verbose | --cache-storage-mode | --action-stdout-on-success | --debug-backtraces | --debug-load-dir | --debug-package-logs | --workspace | --force | -f | --print-metrics | --dump-memo-graph-format | --dump-gc-stats | -x | --diff-command | --trace-extended | --store-orig-source-dir | --instrument-with | --watch-exclusions | --debug-cache | --display-separate-messages | --context | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_show__aliases__complete_positional_args() {
  # Takes the portion of the word under the cursor before the cursor and the
  # index of the current positional argument on the command line and adds comp
  # replies for that positional argument begining with that prefix.
  case "$2" in
    *)
      _dune_add_reply_files "$1"
      ;;
  esac
}

_dune_show__aliases() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      _dune_show__aliases__complete_positional_args "$2" "$positional_argument_index"
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --context --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --manpage --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --error-reporting)
            # completions for: aliases show --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: aliases show --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: aliases show --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: aliases show --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: aliases show --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: aliases show --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: aliases show
            # --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: aliases show --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: aliases show --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: aliases show --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: aliases show --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: aliases show --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: aliases show
            # --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: aliases show
            # --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: aliases show --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: aliases show --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: aliases show -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: aliases show --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: aliases show --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: aliases show
            # --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: aliases show --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: aliases show --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: aliases show --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: aliases show -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: aliases show --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: aliases show --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: aliases show --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --debug-cache)
            # completions for: aliases show --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --context)
            # completions for: aliases show --context
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --stop-on-first-error | --error-reporting | --wait-for-filesystem-clock | --file-watcher | --build-info | --no-print-directory | --trace-file | --build-dir | --profile | --only-packages | --require-dune-project-file | --always-show-command-line | --config-file | --root | --ignore-promoted-rules | --default-target | --promote-install-files | --ignore-lock-dir | --release | --dump-memo-graph-with-timing | --dump-memo-graph | --watch | -w | --auto-promote | --no-buffer | --debug-digests | --debug-artifact-substitution | --debug-dependency-path | --action-stderr-on-success | --cache-check-probability | --cache | --terminal-persistence | -j | --sandbox | --verbose | --cache-storage-mode | --action-stdout-on-success | --debug-backtraces | --debug-load-dir | --debug-package-logs | --workspace | --force | -f | --print-metrics | --dump-memo-graph-format | --dump-gc-stats | -x | --diff-command | --trace-extended | --store-orig-source-dir | --instrument-with | --watch-exclusions | --debug-cache | --display-separate-messages | --context | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_show__package-entries() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      # This is where we would add completions for positional arguments,
      # however this command has no positional arguments
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --context --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --format --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --manpage --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --context)
            # completions for: package-entries show --context
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --error-reporting)
            # completions for: package-entries show
            # --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: package-entries show --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: package-entries show --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: package-entries show --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: package-entries show --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: package-entries show --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: package-entries show
            # --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: package-entries show --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: package-entries show --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: package-entries show --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: package-entries show
            # --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: package-entries show
            # --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: package-entries show
            # --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: package-entries show
            # --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: package-entries show --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: package-entries show
            # --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: package-entries show -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: package-entries show --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: package-entries show
            # --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: package-entries show
            # --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: package-entries show --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: package-entries show
            # --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: package-entries show --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: package-entries show -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: package-entries show --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: package-entries show
            # --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: package-entries show
            # --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --debug-cache)
            # completions for: package-entries show --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --format)
            # completions for: package-entries show --format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --context | --stop-on-first-error | --error-reporting | --wait-for-filesystem-clock | --file-watcher | --build-info | --no-print-directory | --trace-file | --build-dir | --profile | --only-packages | --require-dune-project-file | --always-show-command-line | --config-file | --root | --ignore-promoted-rules | --default-target | --promote-install-files | --ignore-lock-dir | --release | --dump-memo-graph-with-timing | --dump-memo-graph | --watch | -w | --auto-promote | --no-buffer | --debug-digests | --debug-artifact-substitution | --debug-dependency-path | --action-stderr-on-success | --cache-check-probability | --cache | --terminal-persistence | -j | --sandbox | --verbose | --cache-storage-mode | --action-stdout-on-success | --debug-backtraces | --debug-load-dir | --debug-package-logs | --workspace | --force | -f | --print-metrics | --dump-memo-graph-format | --dump-gc-stats | -x | --diff-command | --trace-extended | --store-orig-source-dir | --instrument-with | --watch-exclusions | --debug-cache | --display-separate-messages | --format | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_show__pkg__lock__complete_positional_args() {
  # Takes the portion of the word under the cursor before the cursor and the
  # index of the current positional argument on the command line and adds comp
  # replies for that positional argument begining with that prefix.
  case "$2" in
    *)
      _dune_add_reply_files "$1"
      ;;
  esac
}

_dune_show__pkg__lock() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      _dune_show__pkg__lock__complete_positional_args "$2" "$positional_argument_index"
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --manpage --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --debug-cache)
            # completions for: lock pkg show --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: lock pkg show --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: lock pkg show --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: lock pkg show --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: lock pkg show -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: lock pkg show --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: lock pkg show
            # --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: lock pkg show --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: lock pkg show
            # --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: lock pkg show --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: lock pkg show --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: lock pkg show -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: lock pkg show --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: lock pkg show --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: lock pkg show
            # --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: lock pkg show
            # --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: lock pkg show --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: lock pkg show --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: lock pkg show --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: lock pkg show --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: lock pkg show --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: lock pkg show
            # --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: lock pkg show --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: lock pkg show --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: lock pkg show --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: lock pkg show --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: lock pkg show --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --error-reporting)
            # completions for: lock pkg show --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --display-separate-messages | --debug-cache | --watch-exclusions | --instrument-with | --store-orig-source-dir | --trace-extended | --diff-command | -x | --dump-gc-stats | --dump-memo-graph-format | --print-metrics | --force | -f | --workspace | --debug-package-logs | --debug-load-dir | --debug-backtraces | --action-stdout-on-success | --cache-storage-mode | --verbose | --sandbox | -j | --terminal-persistence | --cache | --cache-check-probability | --action-stderr-on-success | --debug-dependency-path | --debug-artifact-substitution | --debug-digests | --no-buffer | --auto-promote | --watch | -w | --dump-memo-graph | --dump-memo-graph-with-timing | --release | --ignore-lock-dir | --promote-install-files | --default-target | --ignore-promoted-rules | --root | --config-file | --always-show-command-line | --require-dune-project-file | --only-packages | --profile | --build-dir | --trace-file | --no-print-directory | --build-info | --file-watcher | --wait-for-filesystem-clock | --error-reporting | --stop-on-first-error | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_show__pkg__list-locked-dependencies__complete_positional_args() {
  # Takes the portion of the word under the cursor before the cursor and the
  # index of the current positional argument on the command line and adds comp
  # replies for that positional argument begining with that prefix.
  case "$2" in
    *)
      _dune_add_reply_files "$1"
      ;;
  esac
}

_dune_show__pkg__list-locked-dependencies() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      _dune_show__pkg__list-locked-dependencies__complete_positional_args "$2" "$positional_argument_index"
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --manpage --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --transitive --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --error-reporting)
            # completions for: list-locked-dependencies pkg show
            # --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: list-locked-dependencies pkg show
            # --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: list-locked-dependencies pkg show
            # --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: list-locked-dependencies pkg show
            # --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: list-locked-dependencies pkg show
            # --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: list-locked-dependencies pkg show
            # --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: list-locked-dependencies pkg show
            # --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: list-locked-dependencies pkg show
            # --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: list-locked-dependencies pkg show
            # --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: list-locked-dependencies pkg show
            # --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: list-locked-dependencies pkg show
            # --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: list-locked-dependencies pkg show
            # --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: list-locked-dependencies pkg show
            # --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: list-locked-dependencies pkg show
            # --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: list-locked-dependencies pkg show
            # --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: list-locked-dependencies pkg show
            # --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: list-locked-dependencies pkg show -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: list-locked-dependencies pkg show
            # --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: list-locked-dependencies pkg show
            # --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: list-locked-dependencies pkg show
            # --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: list-locked-dependencies pkg show
            # --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: list-locked-dependencies pkg show
            # --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: list-locked-dependencies pkg show
            # --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: list-locked-dependencies pkg show -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: list-locked-dependencies pkg show
            # --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: list-locked-dependencies pkg show
            # --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: list-locked-dependencies pkg show
            # --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --debug-cache)
            # completions for: list-locked-dependencies pkg show
            # --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --transitive | --stop-on-first-error | --error-reporting | --wait-for-filesystem-clock | --file-watcher | --build-info | --no-print-directory | --trace-file | --build-dir | --profile | --only-packages | --require-dune-project-file | --always-show-command-line | --config-file | --root | --ignore-promoted-rules | --default-target | --promote-install-files | --ignore-lock-dir | --release | --dump-memo-graph-with-timing | --dump-memo-graph | --watch | -w | --auto-promote | --no-buffer | --debug-digests | --debug-artifact-substitution | --debug-dependency-path | --action-stderr-on-success | --cache-check-probability | --cache | --terminal-persistence | -j | --sandbox | --verbose | --cache-storage-mode | --action-stdout-on-success | --debug-backtraces | --debug-load-dir | --debug-package-logs | --workspace | --force | -f | --print-metrics | --dump-memo-graph-format | --dump-gc-stats | -x | --diff-command | --trace-extended | --store-orig-source-dir | --instrument-with | --watch-exclusions | --debug-cache | --display-separate-messages | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_show__pkg__dependency-hash() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      # This is where we would add completions for positional arguments,
      # however this command has no positional arguments
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --manpage --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --error-reporting)
            # completions for: dependency-hash pkg show
            # --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: dependency-hash pkg show
            # --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: dependency-hash pkg show --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: dependency-hash pkg show --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: dependency-hash pkg show --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: dependency-hash pkg show
            # --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: dependency-hash pkg show
            # --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: dependency-hash pkg show
            # --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: dependency-hash pkg show --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: dependency-hash pkg show
            # --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: dependency-hash pkg show
            # --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: dependency-hash pkg show
            # --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: dependency-hash pkg show
            # --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: dependency-hash pkg show
            # --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: dependency-hash pkg show --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: dependency-hash pkg show
            # --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: dependency-hash pkg show -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: dependency-hash pkg show --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: dependency-hash pkg show
            # --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: dependency-hash pkg show
            # --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: dependency-hash pkg show --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: dependency-hash pkg show
            # --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: dependency-hash pkg show
            # --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: dependency-hash pkg show -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: dependency-hash pkg show
            # --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: dependency-hash pkg show
            # --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: dependency-hash pkg show
            # --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --debug-cache)
            # completions for: dependency-hash pkg show
            # --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --stop-on-first-error | --error-reporting | --wait-for-filesystem-clock | --file-watcher | --build-info | --no-print-directory | --trace-file | --build-dir | --profile | --only-packages | --require-dune-project-file | --always-show-command-line | --config-file | --root | --ignore-promoted-rules | --default-target | --promote-install-files | --ignore-lock-dir | --release | --dump-memo-graph-with-timing | --dump-memo-graph | --watch | -w | --auto-promote | --no-buffer | --debug-digests | --debug-artifact-substitution | --debug-dependency-path | --action-stderr-on-success | --cache-check-probability | --cache | --terminal-persistence | -j | --sandbox | --verbose | --cache-storage-mode | --action-stdout-on-success | --debug-backtraces | --debug-load-dir | --debug-package-logs | --workspace | --force | -f | --print-metrics | --dump-memo-graph-format | --dump-gc-stats | -x | --diff-command | --trace-extended | --store-orig-source-dir | --instrument-with | --watch-exclusions | --debug-cache | --display-separate-messages | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_show__pkg() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      _dune_add_reply_fixed "$2" "lock list-locked-dependencies dependency-hash"
      # This is where we would add completions for positional arguments,
      # however this command has no positional arguments
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--help --manpage -h"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
        esac
      fi
      case "$current_word" in
        --help | -h | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        lock)
          _dune_show__pkg__lock "$1" "$2" "$3"
          return "$?"
          ;;
        list-locked-dependencies)
          _dune_show__pkg__list-locked-dependencies "$1" "$2" "$3"
          return "$?"
          ;;
        dependency-hash)
          _dune_show__pkg__dependency-hash "$1" "$2" "$3"
          return "$?"
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_show__contexts() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      # This is where we would add completions for positional arguments,
      # however this command has no positional arguments
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --manpage --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --error-reporting)
            # completions for: contexts show --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: contexts show --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: contexts show --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: contexts show --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: contexts show --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: contexts show --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: contexts show
            # --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: contexts show --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: contexts show --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: contexts show --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: contexts show --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: contexts show --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: contexts show
            # --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: contexts show
            # --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: contexts show --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: contexts show --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: contexts show -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: contexts show --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: contexts show --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: contexts show
            # --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: contexts show --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: contexts show
            # --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: contexts show --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: contexts show -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: contexts show --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: contexts show --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: contexts show --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --debug-cache)
            # completions for: contexts show --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --stop-on-first-error | --error-reporting | --wait-for-filesystem-clock | --file-watcher | --build-info | --no-print-directory | --trace-file | --build-dir | --profile | --only-packages | --require-dune-project-file | --always-show-command-line | --config-file | --root | --ignore-promoted-rules | --default-target | --promote-install-files | --ignore-lock-dir | --release | --dump-memo-graph-with-timing | --dump-memo-graph | --watch | -w | --auto-promote | --no-buffer | --debug-digests | --debug-artifact-substitution | --debug-dependency-path | --action-stderr-on-success | --cache-check-probability | --cache | --terminal-persistence | -j | --sandbox | --verbose | --cache-storage-mode | --action-stdout-on-success | --debug-backtraces | --debug-load-dir | --debug-package-logs | --workspace | --force | -f | --print-metrics | --dump-memo-graph-format | --dump-gc-stats | -x | --diff-command | --trace-extended | --store-orig-source-dir | --instrument-with | --watch-exclusions | --debug-cache | --display-separate-messages | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_show__depexts__complete_positional_args() {
  # Takes the portion of the word under the cursor before the cursor and the
  # index of the current positional argument on the command line and adds comp
  # replies for that positional argument begining with that prefix.
  case "$2" in
    *)
      _dune_add_reply_files "$1"
      ;;
  esac
}

_dune_show__depexts() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      _dune_show__depexts__complete_positional_args "$2" "$positional_argument_index"
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --manpage --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --debug-cache)
            # completions for: depexts show --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: depexts show --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: depexts show --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: depexts show --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: depexts show -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: depexts show --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: depexts show --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: depexts show --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: depexts show
            # --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: depexts show --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: depexts show --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: depexts show -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: depexts show --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: depexts show --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: depexts show
            # --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: depexts show
            # --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: depexts show --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: depexts show --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: depexts show --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: depexts show --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: depexts show --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: depexts show
            # --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: depexts show --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: depexts show --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: depexts show --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: depexts show --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: depexts show --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --error-reporting)
            # completions for: depexts show --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --display-separate-messages | --debug-cache | --watch-exclusions | --instrument-with | --store-orig-source-dir | --trace-extended | --diff-command | -x | --dump-gc-stats | --dump-memo-graph-format | --print-metrics | --force | -f | --workspace | --debug-package-logs | --debug-load-dir | --debug-backtraces | --action-stdout-on-success | --cache-storage-mode | --verbose | --sandbox | -j | --terminal-persistence | --cache | --cache-check-probability | --action-stderr-on-success | --debug-dependency-path | --debug-artifact-substitution | --debug-digests | --no-buffer | --auto-promote | --watch | -w | --dump-memo-graph | --dump-memo-graph-with-timing | --release | --ignore-lock-dir | --promote-install-files | --default-target | --ignore-promoted-rules | --root | --config-file | --always-show-command-line | --require-dune-project-file | --only-packages | --profile | --build-dir | --trace-file | --no-print-directory | --build-info | --file-watcher | --wait-for-filesystem-clock | --error-reporting | --stop-on-first-error | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_show() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      _dune_add_reply_fixed "$2" "workspace external-lib-deps opam-files pp env rules installed-libraries targets aliases package-entries pkg contexts depexts"
      # This is where we would add completions for positional arguments,
      # however this command has no positional arguments
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--help --manpage -h"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
        esac
      fi
      case "$current_word" in
        --help | -h | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        workspace)
          _dune_show__workspace "$1" "$2" "$3"
          return "$?"
          ;;
        external-lib-deps)
          _dune_show__external-lib-deps "$1" "$2" "$3"
          return "$?"
          ;;
        opam-files)
          _dune_show__opam-files "$1" "$2" "$3"
          return "$?"
          ;;
        pp)
          _dune_show__pp "$1" "$2" "$3"
          return "$?"
          ;;
        env)
          _dune_show__env "$1" "$2" "$3"
          return "$?"
          ;;
        rules)
          _dune_show__rules "$1" "$2" "$3"
          return "$?"
          ;;
        installed-libraries)
          _dune_show__installed-libraries "$1" "$2" "$3"
          return "$?"
          ;;
        targets)
          _dune_show__targets "$1" "$2" "$3"
          return "$?"
          ;;
        aliases)
          _dune_show__aliases "$1" "$2" "$3"
          return "$?"
          ;;
        package-entries)
          _dune_show__package-entries "$1" "$2" "$3"
          return "$?"
          ;;
        pkg)
          _dune_show__pkg "$1" "$2" "$3"
          return "$?"
          ;;
        contexts)
          _dune_show__contexts "$1" "$2" "$3"
          return "$?"
          ;;
        depexts)
          _dune_show__depexts "$1" "$2" "$3"
          return "$?"
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_rpc__status() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      # This is where we would add completions for positional arguments,
      # however this command has no positional arguments
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --all --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --manpage --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --debug-cache)
            # completions for: status rpc --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: status rpc --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: status rpc --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: status rpc --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: status rpc -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: status rpc --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: status rpc --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: status rpc --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: status rpc --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: status rpc --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: status rpc --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: status rpc -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: status rpc --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: status rpc --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: status rpc --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: status rpc --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: status rpc --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: status rpc --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: status rpc --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: status rpc --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: status rpc --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: status rpc
            # --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: status rpc --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: status rpc --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: status rpc --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: status rpc --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: status rpc --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --error-reporting)
            # completions for: status rpc --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --display-separate-messages | --debug-cache | --watch-exclusions | --instrument-with | --store-orig-source-dir | --trace-extended | --diff-command | -x | --dump-gc-stats | --dump-memo-graph-format | --print-metrics | --force | -f | --workspace | --debug-package-logs | --debug-load-dir | --debug-backtraces | --action-stdout-on-success | --cache-storage-mode | --verbose | --sandbox | -j | --terminal-persistence | --cache | --cache-check-probability | --action-stderr-on-success | --debug-dependency-path | --debug-artifact-substitution | --debug-digests | --no-buffer | --auto-promote | --watch | -w | --dump-memo-graph | --dump-memo-graph-with-timing | --release | --ignore-lock-dir | --promote-install-files | --default-target | --ignore-promoted-rules | --root | --config-file | --always-show-command-line | --require-dune-project-file | --only-packages | --profile | --build-dir | --trace-file | --no-print-directory | --build-info | --file-watcher | --wait-for-filesystem-clock | --error-reporting | --stop-on-first-error | --all | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_rpc__build__complete_positional_args() {
  # Takes the portion of the word under the cursor before the cursor and the
  # index of the current positional argument on the command line and adds comp
  # replies for that positional argument begining with that prefix.
  case "$2" in
    *)
      _dune_add_reply_files "$1"
      ;;
  esac
}

_dune_rpc__build() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      _dune_rpc__build__complete_positional_args "$2" "$positional_argument_index"
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --manpage --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --error-reporting)
            # completions for: build rpc --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: build rpc --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: build rpc --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: build rpc --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: build rpc --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: build rpc --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: build rpc --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: build rpc --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: build rpc --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: build rpc --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: build rpc --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: build rpc --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: build rpc --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: build rpc --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: build rpc --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: build rpc --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: build rpc -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: build rpc --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: build rpc --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: build rpc --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: build rpc --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: build rpc --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: build rpc --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: build rpc -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: build rpc --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: build rpc --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: build rpc --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --debug-cache)
            # completions for: build rpc --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --wait | --stop-on-first-error | --error-reporting | --wait-for-filesystem-clock | --file-watcher | --build-info | --no-print-directory | --trace-file | --build-dir | --profile | --only-packages | --require-dune-project-file | --always-show-command-line | --config-file | --root | --ignore-promoted-rules | --default-target | --promote-install-files | --ignore-lock-dir | --release | --dump-memo-graph-with-timing | --dump-memo-graph | --watch | -w | --auto-promote | --no-buffer | --debug-digests | --debug-artifact-substitution | --debug-dependency-path | --action-stderr-on-success | --cache-check-probability | --cache | --terminal-persistence | -j | --sandbox | --verbose | --cache-storage-mode | --action-stdout-on-success | --debug-backtraces | --debug-load-dir | --debug-package-logs | --workspace | --force | -f | --print-metrics | --dump-memo-graph-format | --dump-gc-stats | -x | --diff-command | --trace-extended | --store-orig-source-dir | --instrument-with | --watch-exclusions | --debug-cache | --display-separate-messages | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_rpc__ping() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      # This is where we would add completions for positional arguments,
      # however this command has no positional arguments
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --manpage --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --error-reporting)
            # completions for: ping rpc --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: ping rpc --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: ping rpc --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: ping rpc --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: ping rpc --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: ping rpc --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: ping rpc --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: ping rpc --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: ping rpc --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: ping rpc --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: ping rpc --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: ping rpc --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: ping rpc --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: ping rpc --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: ping rpc --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: ping rpc --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: ping rpc -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: ping rpc --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: ping rpc --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: ping rpc --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: ping rpc --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: ping rpc --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: ping rpc --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: ping rpc -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: ping rpc --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: ping rpc --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: ping rpc --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --debug-cache)
            # completions for: ping rpc --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --stop-on-first-error | --error-reporting | --wait-for-filesystem-clock | --file-watcher | --build-info | --no-print-directory | --trace-file | --build-dir | --profile | --only-packages | --require-dune-project-file | --always-show-command-line | --config-file | --root | --ignore-promoted-rules | --default-target | --promote-install-files | --ignore-lock-dir | --release | --dump-memo-graph-with-timing | --dump-memo-graph | --watch | -w | --auto-promote | --no-buffer | --debug-digests | --debug-artifact-substitution | --debug-dependency-path | --action-stderr-on-success | --cache-check-probability | --cache | --terminal-persistence | -j | --sandbox | --verbose | --cache-storage-mode | --action-stdout-on-success | --debug-backtraces | --debug-load-dir | --debug-package-logs | --workspace | --force | -f | --print-metrics | --dump-memo-graph-format | --dump-gc-stats | -x | --diff-command | --trace-extended | --store-orig-source-dir | --instrument-with | --watch-exclusions | --debug-cache | --display-separate-messages | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_rpc() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      _dune_add_reply_fixed "$2" "status build ping"
      # This is where we would add completions for positional arguments,
      # however this command has no positional arguments
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--help --manpage -h"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
        esac
      fi
      case "$current_word" in
        --help | -h | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        status)
          _dune_rpc__status "$1" "$2" "$3"
          return "$?"
          ;;
        build)
          _dune_rpc__build "$1" "$2" "$3"
          return "$?"
          ;;
        ping)
          _dune_rpc__ping "$1" "$2" "$3"
          return "$?"
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_internal__dump__complete_positional_args() {
  # Takes the portion of the word under the cursor before the cursor and the
  # index of the current positional argument on the command line and adds comp
  # replies for that positional argument begining with that prefix.
  case "$2" in
    0)
      _dune_add_reply_files "$1"
      ;;
  esac
}

_dune_internal__dump() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      _dune_internal__dump__complete_positional_args "$2" "$positional_argument_index"
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --manpage --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --debug-cache)
            # completions for: dump internal --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: dump internal --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: dump internal --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: dump internal --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: dump internal -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: dump internal --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: dump internal
            # --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: dump internal --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: dump internal
            # --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: dump internal --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: dump internal --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: dump internal -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: dump internal --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: dump internal --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: dump internal
            # --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: dump internal
            # --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: dump internal --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: dump internal --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: dump internal --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: dump internal --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: dump internal --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: dump internal
            # --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: dump internal --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: dump internal --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: dump internal --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: dump internal --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: dump internal --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --error-reporting)
            # completions for: dump internal --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --display-separate-messages | --debug-cache | --watch-exclusions | --instrument-with | --store-orig-source-dir | --trace-extended | --diff-command | -x | --dump-gc-stats | --dump-memo-graph-format | --print-metrics | --force | -f | --workspace | --debug-package-logs | --debug-load-dir | --debug-backtraces | --action-stdout-on-success | --cache-storage-mode | --verbose | --sandbox | -j | --terminal-persistence | --cache | --cache-check-probability | --action-stderr-on-success | --debug-dependency-path | --debug-artifact-substitution | --debug-digests | --no-buffer | --auto-promote | --watch | -w | --dump-memo-graph | --dump-memo-graph-with-timing | --release | --ignore-lock-dir | --promote-install-files | --default-target | --ignore-promoted-rules | --root | --config-file | --always-show-command-line | --require-dune-project-file | --only-packages | --profile | --build-dir | --trace-file | --no-print-directory | --build-info | --file-watcher | --wait-for-filesystem-clock | --error-reporting | --stop-on-first-error | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_internal__latest-lang-version() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      # This is where we would add completions for positional arguments,
      # however this command has no positional arguments
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--help --manpage -h"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
        esac
      fi
      case "$current_word" in
        --help | -h | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_internal__print-completion-script-bash() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      # This is where we would add completions for positional arguments,
      # however this command has no positional arguments
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--global-symbol-prefix --minify-global-names --minify-local-variables --no-command-hash-in-function-names --no-comments --no-whitespace --optimize-case-statements --program-exe-for-reentrant-query --program-name"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --global-symbol-prefix | --program-exe-for-reentrant-query | --program-name)
            # case for named arguments without hints
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --optimize-case-statements | --minify-local-variables | --minify-global-names | --no-whitespace | --no-comments | --no-command-hash-in-function-names | --global-symbol-prefix | --program-exe-for-reentrant-query | --program-name)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_internal() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      _dune_add_reply_fixed "$2" "dump latest-lang-version print-completion-script-bash"
      # This is where we would add completions for positional arguments,
      # however this command has no positional arguments
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--help --manpage -h"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
        esac
      fi
      case "$current_word" in
        --help | -h | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        dump)
          _dune_internal__dump "$1" "$2" "$3"
          return "$?"
          ;;
        latest-lang-version)
          _dune_internal__latest-lang-version "$1" "$2" "$3"
          return "$?"
          ;;
        print-completion-script-bash)
          _dune_internal__print-completion-script-bash "$1" "$2" "$3"
          return "$?"
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_init__executable__complete_positional_args() {
  # Takes the portion of the word under the cursor before the cursor and the
  # index of the current positional argument on the command line and adds comp
  # replies for that positional argument begining with that prefix.
  case "$2" in
    0)
      _dune_add_reply_files "$1"
      ;;
    1)
      _dune_add_reply_files "$1"
      ;;
  esac
}

_dune_init__executable() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      _dune_init__executable__complete_positional_args "$2" "$positional_argument_index"
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --libs --manpage --no-buffer --no-print-directory --only-packages --ppx --print-metrics --profile --promote-install-files --public --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --debug-cache)
            # completions for: executable init --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: executable init --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: executable init --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: executable init --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: executable init -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: executable init --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: executable init
            # --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: executable init --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: executable init
            # --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: executable init --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: executable init --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: executable init -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: executable init
            # --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: executable init --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: executable init
            # --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: executable init
            # --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: executable init --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: executable init
            # --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: executable init --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: executable init --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: executable init --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: executable init
            # --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: executable init --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: executable init --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: executable init --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: executable init --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: executable init --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --error-reporting)
            # completions for: executable init --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --libs)
            # completions for: executable init --libs
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --public)
            # completions for: executable init --public
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --ppx)
            # completions for: executable init --ppx
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --display-separate-messages | --debug-cache | --watch-exclusions | --instrument-with | --store-orig-source-dir | --trace-extended | --diff-command | -x | --dump-gc-stats | --dump-memo-graph-format | --print-metrics | --force | -f | --workspace | --debug-package-logs | --debug-load-dir | --debug-backtraces | --action-stdout-on-success | --cache-storage-mode | --verbose | --sandbox | -j | --terminal-persistence | --cache | --cache-check-probability | --action-stderr-on-success | --debug-dependency-path | --debug-artifact-substitution | --debug-digests | --no-buffer | --auto-promote | --watch | -w | --dump-memo-graph | --dump-memo-graph-with-timing | --release | --ignore-lock-dir | --promote-install-files | --default-target | --ignore-promoted-rules | --root | --config-file | --always-show-command-line | --require-dune-project-file | --only-packages | --profile | --build-dir | --trace-file | --no-print-directory | --build-info | --file-watcher | --wait-for-filesystem-clock | --error-reporting | --stop-on-first-error | --libs | --public | --ppx | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_init__project__complete_positional_args() {
  # Takes the portion of the word under the cursor before the cursor and the
  # index of the current positional argument on the command line and adds comp
  # replies for that positional argument begining with that prefix.
  case "$2" in
    0)
      _dune_add_reply_files "$1"
      ;;
    1)
      _dune_add_reply_files "$1"
      ;;
  esac
}

_dune_init__project() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      _dune_init__project__complete_positional_args "$2" "$positional_argument_index"
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --inline-tests --instrument-with --kind --libs --manpage --no-buffer --no-print-directory --only-packages --pkg --ppx --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --kind)
            # completions for: project init --kind
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --ppx)
            # completions for: project init --ppx
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --libs)
            # completions for: project init --libs
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --debug-cache)
            # completions for: project init --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: project init --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: project init --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: project init --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: project init -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: project init --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: project init --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: project init --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: project init
            # --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: project init --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: project init --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: project init -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: project init --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: project init --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: project init
            # --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: project init
            # --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: project init --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: project init --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: project init --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: project init --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: project init --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: project init
            # --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: project init --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: project init --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: project init --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: project init --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: project init --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --error-reporting)
            # completions for: project init --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --pkg)
            # completions for: project init --pkg
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --kind | --ppx | --libs | --display-separate-messages | --debug-cache | --watch-exclusions | --instrument-with | --store-orig-source-dir | --trace-extended | --diff-command | -x | --dump-gc-stats | --dump-memo-graph-format | --print-metrics | --force | -f | --workspace | --debug-package-logs | --debug-load-dir | --debug-backtraces | --action-stdout-on-success | --cache-storage-mode | --verbose | --sandbox | -j | --terminal-persistence | --cache | --cache-check-probability | --action-stderr-on-success | --debug-dependency-path | --debug-artifact-substitution | --debug-digests | --no-buffer | --auto-promote | --watch | -w | --dump-memo-graph | --dump-memo-graph-with-timing | --release | --ignore-lock-dir | --promote-install-files | --default-target | --ignore-promoted-rules | --root | --config-file | --always-show-command-line | --require-dune-project-file | --only-packages | --profile | --build-dir | --trace-file | --no-print-directory | --build-info | --file-watcher | --wait-for-filesystem-clock | --error-reporting | --stop-on-first-error | --inline-tests | --pkg | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_init__library__complete_positional_args() {
  # Takes the portion of the word under the cursor before the cursor and the
  # index of the current positional argument on the command line and adds comp
  # replies for that positional argument begining with that prefix.
  case "$2" in
    0)
      _dune_add_reply_files "$1"
      ;;
    1)
      _dune_add_reply_files "$1"
      ;;
  esac
}

_dune_init__library() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      _dune_init__library__complete_positional_args "$2" "$positional_argument_index"
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --inline-tests --instrument-with --libs --manpage --no-buffer --no-print-directory --only-packages --ppx --print-metrics --profile --promote-install-files --public --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --ppx)
            # completions for: library init --ppx
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --public)
            # completions for: library init --public
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --libs)
            # completions for: library init --libs
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --error-reporting)
            # completions for: library init --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: library init --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: library init --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: library init --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: library init --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: library init --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: library init
            # --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: library init --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: library init --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: library init --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: library init --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: library init --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: library init
            # --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: library init
            # --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: library init --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: library init --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: library init -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: library init --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: library init --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: library init
            # --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: library init --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: library init --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: library init --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: library init -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: library init --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: library init --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: library init --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --debug-cache)
            # completions for: library init --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --ppx | --public | --libs | --stop-on-first-error | --error-reporting | --wait-for-filesystem-clock | --file-watcher | --build-info | --no-print-directory | --trace-file | --build-dir | --profile | --only-packages | --require-dune-project-file | --always-show-command-line | --config-file | --root | --ignore-promoted-rules | --default-target | --promote-install-files | --ignore-lock-dir | --release | --dump-memo-graph-with-timing | --dump-memo-graph | --watch | -w | --auto-promote | --no-buffer | --debug-digests | --debug-artifact-substitution | --debug-dependency-path | --action-stderr-on-success | --cache-check-probability | --cache | --terminal-persistence | -j | --sandbox | --verbose | --cache-storage-mode | --action-stdout-on-success | --debug-backtraces | --debug-load-dir | --debug-package-logs | --workspace | --force | -f | --print-metrics | --dump-memo-graph-format | --dump-gc-stats | -x | --diff-command | --trace-extended | --store-orig-source-dir | --instrument-with | --watch-exclusions | --debug-cache | --display-separate-messages | --inline-tests | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_init__test__complete_positional_args() {
  # Takes the portion of the word under the cursor before the cursor and the
  # index of the current positional argument on the command line and adds comp
  # replies for that positional argument begining with that prefix.
  case "$2" in
    0)
      _dune_add_reply_files "$1"
      ;;
    1)
      _dune_add_reply_files "$1"
      ;;
  esac
}

_dune_init__test() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      _dune_init__test__complete_positional_args "$2" "$positional_argument_index"
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --libs --manpage --no-buffer --no-print-directory --only-packages --ppx --print-metrics --profile --promote-install-files --public --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --debug-cache)
            # completions for: test init --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: test init --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: test init --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: test init --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: test init -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: test init --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: test init --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: test init --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: test init --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: test init --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: test init --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: test init -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: test init --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: test init --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: test init --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: test init --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: test init --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: test init --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: test init --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: test init --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: test init --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: test init --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: test init --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: test init --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: test init --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: test init --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: test init --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --error-reporting)
            # completions for: test init --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --libs)
            # completions for: test init --libs
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --public)
            # completions for: test init --public
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --ppx)
            # completions for: test init --ppx
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --display-separate-messages | --debug-cache | --watch-exclusions | --instrument-with | --store-orig-source-dir | --trace-extended | --diff-command | -x | --dump-gc-stats | --dump-memo-graph-format | --print-metrics | --force | -f | --workspace | --debug-package-logs | --debug-load-dir | --debug-backtraces | --action-stdout-on-success | --cache-storage-mode | --verbose | --sandbox | -j | --terminal-persistence | --cache | --cache-check-probability | --action-stderr-on-success | --debug-dependency-path | --debug-artifact-substitution | --debug-digests | --no-buffer | --auto-promote | --watch | -w | --dump-memo-graph | --dump-memo-graph-with-timing | --release | --ignore-lock-dir | --promote-install-files | --default-target | --ignore-promoted-rules | --root | --config-file | --always-show-command-line | --require-dune-project-file | --only-packages | --profile | --build-dir | --trace-file | --no-print-directory | --build-info | --file-watcher | --wait-for-filesystem-clock | --error-reporting | --stop-on-first-error | --libs | --public | --ppx | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_init() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      _dune_add_reply_fixed "$2" "executable project library test"
      # This is where we would add completions for positional arguments,
      # however this command has no positional arguments
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--help --manpage -h"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
        esac
      fi
      case "$current_word" in
        --help | -h | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        executable)
          _dune_init__executable "$1" "$2" "$3"
          return "$?"
          ;;
        project)
          _dune_init__project "$1" "$2" "$3"
          return "$?"
          ;;
        library)
          _dune_init__library "$1" "$2" "$3"
          return "$?"
          ;;
        test)
          _dune_init__test "$1" "$2" "$3"
          return "$?"
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_promotion__list__complete_positional_args() {
  # Takes the portion of the word under the cursor before the cursor and the
  # index of the current positional argument on the command line and adds comp
  # replies for that positional argument begining with that prefix.
  case "$2" in
    *)
      _dune_add_reply_files "$1"
      ;;
  esac
}

_dune_promotion__list() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      _dune_promotion__list__complete_positional_args "$2" "$positional_argument_index"
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --manpage --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --debug-cache)
            # completions for: list promotion --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: list promotion --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: list promotion --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: list promotion --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: list promotion -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: list promotion --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: list promotion
            # --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: list promotion --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: list promotion
            # --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: list promotion --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: list promotion --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: list promotion -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: list promotion --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: list promotion --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: list promotion
            # --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: list promotion
            # --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: list promotion --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: list promotion
            # --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: list promotion --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: list promotion --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: list promotion --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: list promotion
            # --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: list promotion --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: list promotion --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: list promotion --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: list promotion --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: list promotion --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --error-reporting)
            # completions for: list promotion --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --display-separate-messages | --debug-cache | --watch-exclusions | --instrument-with | --store-orig-source-dir | --trace-extended | --diff-command | -x | --dump-gc-stats | --dump-memo-graph-format | --print-metrics | --force | -f | --workspace | --debug-package-logs | --debug-load-dir | --debug-backtraces | --action-stdout-on-success | --cache-storage-mode | --verbose | --sandbox | -j | --terminal-persistence | --cache | --cache-check-probability | --action-stderr-on-success | --debug-dependency-path | --debug-artifact-substitution | --debug-digests | --no-buffer | --auto-promote | --watch | -w | --dump-memo-graph | --dump-memo-graph-with-timing | --release | --ignore-lock-dir | --promote-install-files | --default-target | --ignore-promoted-rules | --root | --config-file | --always-show-command-line | --require-dune-project-file | --only-packages | --profile | --build-dir | --trace-file | --no-print-directory | --build-info | --file-watcher | --wait-for-filesystem-clock | --error-reporting | --stop-on-first-error | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_promotion__apply__complete_positional_args() {
  # Takes the portion of the word under the cursor before the cursor and the
  # index of the current positional argument on the command line and adds comp
  # replies for that positional argument begining with that prefix.
  case "$2" in
    *)
      _dune_add_reply_files "$1"
      ;;
  esac
}

_dune_promotion__apply() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      _dune_promotion__apply__complete_positional_args "$2" "$positional_argument_index"
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --manpage --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --debug-cache)
            # completions for: apply promotion --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: apply promotion --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: apply promotion --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: apply promotion --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: apply promotion -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: apply promotion --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: apply promotion
            # --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: apply promotion --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: apply promotion
            # --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: apply promotion --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: apply promotion --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: apply promotion -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: apply promotion
            # --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: apply promotion --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: apply promotion
            # --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: apply promotion
            # --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: apply promotion --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: apply promotion
            # --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: apply promotion --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: apply promotion --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: apply promotion --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: apply promotion
            # --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: apply promotion --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: apply promotion --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: apply promotion --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: apply promotion --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: apply promotion --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --error-reporting)
            # completions for: apply promotion --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --display-separate-messages | --debug-cache | --watch-exclusions | --instrument-with | --store-orig-source-dir | --trace-extended | --diff-command | -x | --dump-gc-stats | --dump-memo-graph-format | --print-metrics | --force | -f | --workspace | --debug-package-logs | --debug-load-dir | --debug-backtraces | --action-stdout-on-success | --cache-storage-mode | --verbose | --sandbox | -j | --terminal-persistence | --cache | --cache-check-probability | --action-stderr-on-success | --debug-dependency-path | --debug-artifact-substitution | --debug-digests | --no-buffer | --auto-promote | --watch | -w | --dump-memo-graph | --dump-memo-graph-with-timing | --release | --ignore-lock-dir | --promote-install-files | --default-target | --ignore-promoted-rules | --root | --config-file | --always-show-command-line | --require-dune-project-file | --only-packages | --profile | --build-dir | --trace-file | --no-print-directory | --build-info | --file-watcher | --wait-for-filesystem-clock | --error-reporting | --stop-on-first-error | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_promotion__diff__complete_positional_args() {
  # Takes the portion of the word under the cursor before the cursor and the
  # index of the current positional argument on the command line and adds comp
  # replies for that positional argument begining with that prefix.
  case "$2" in
    *)
      _dune_add_reply_files "$1"
      ;;
  esac
}

_dune_promotion__diff() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      _dune_promotion__diff__complete_positional_args "$2" "$positional_argument_index"
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --manpage --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --debug-cache)
            # completions for: diff promotion --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: diff promotion --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: diff promotion --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: diff promotion --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: diff promotion -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: diff promotion --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: diff promotion
            # --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: diff promotion --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: diff promotion
            # --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: diff promotion --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: diff promotion --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: diff promotion -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: diff promotion --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: diff promotion --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: diff promotion
            # --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: diff promotion
            # --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: diff promotion --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: diff promotion
            # --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: diff promotion --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: diff promotion --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: diff promotion --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: diff promotion
            # --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: diff promotion --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: diff promotion --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: diff promotion --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: diff promotion --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: diff promotion --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --error-reporting)
            # completions for: diff promotion --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --display-separate-messages | --debug-cache | --watch-exclusions | --instrument-with | --store-orig-source-dir | --trace-extended | --diff-command | -x | --dump-gc-stats | --dump-memo-graph-format | --print-metrics | --force | -f | --workspace | --debug-package-logs | --debug-load-dir | --debug-backtraces | --action-stdout-on-success | --cache-storage-mode | --verbose | --sandbox | -j | --terminal-persistence | --cache | --cache-check-probability | --action-stderr-on-success | --debug-dependency-path | --debug-artifact-substitution | --debug-digests | --no-buffer | --auto-promote | --watch | -w | --dump-memo-graph | --dump-memo-graph-with-timing | --release | --ignore-lock-dir | --promote-install-files | --default-target | --ignore-promoted-rules | --root | --config-file | --always-show-command-line | --require-dune-project-file | --only-packages | --profile | --build-dir | --trace-file | --no-print-directory | --build-info | --file-watcher | --wait-for-filesystem-clock | --error-reporting | --stop-on-first-error | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_promotion() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      _dune_add_reply_fixed "$2" "list apply diff"
      # This is where we would add completions for positional arguments,
      # however this command has no positional arguments
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--help --manpage -h"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
        esac
      fi
      case "$current_word" in
        --help | -h | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        list)
          _dune_promotion__list "$1" "$2" "$3"
          return "$?"
          ;;
        apply)
          _dune_promotion__apply "$1" "$2" "$3"
          return "$?"
          ;;
        diff)
          _dune_promotion__diff "$1" "$2" "$3"
          return "$?"
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_pkg__lock__complete_positional_args() {
  # Takes the portion of the word under the cursor before the cursor and the
  # index of the current positional argument on the command line and adds comp
  # replies for that positional argument begining with that prefix.
  case "$2" in
    *)
      _dune_add_reply_files "$1"
      ;;
  esac
}

_dune_pkg__lock() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      _dune_pkg__lock__complete_positional_args "$2" "$positional_argument_index"
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --manpage --no-buffer --no-print-directory --only-packages --print-metrics --print-perf-stats --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --version-preference --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --debug-cache)
            # completions for: lock pkg --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: lock pkg --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: lock pkg --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: lock pkg --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: lock pkg -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: lock pkg --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: lock pkg --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: lock pkg --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: lock pkg --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: lock pkg --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: lock pkg --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: lock pkg -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: lock pkg --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: lock pkg --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: lock pkg --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: lock pkg --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: lock pkg --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: lock pkg --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: lock pkg --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: lock pkg --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: lock pkg --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: lock pkg --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: lock pkg --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: lock pkg --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: lock pkg --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: lock pkg --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: lock pkg --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --error-reporting)
            # completions for: lock pkg --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --version-preference)
            # completions for: lock pkg --version-preference
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --display-separate-messages | --debug-cache | --watch-exclusions | --instrument-with | --store-orig-source-dir | --trace-extended | --diff-command | -x | --dump-gc-stats | --dump-memo-graph-format | --print-metrics | --force | -f | --workspace | --debug-package-logs | --debug-load-dir | --debug-backtraces | --action-stdout-on-success | --cache-storage-mode | --verbose | --sandbox | -j | --terminal-persistence | --cache | --cache-check-probability | --action-stderr-on-success | --debug-dependency-path | --debug-artifact-substitution | --debug-digests | --no-buffer | --auto-promote | --watch | -w | --dump-memo-graph | --dump-memo-graph-with-timing | --release | --ignore-lock-dir | --promote-install-files | --default-target | --ignore-promoted-rules | --root | --config-file | --always-show-command-line | --require-dune-project-file | --only-packages | --profile | --build-dir | --trace-file | --no-print-directory | --build-info | --file-watcher | --wait-for-filesystem-clock | --error-reporting | --stop-on-first-error | --version-preference | --print-perf-stats | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_pkg__print-solver-env__complete_positional_args() {
  # Takes the portion of the word under the cursor before the cursor and the
  # index of the current positional argument on the command line and adds comp
  # replies for that positional argument begining with that prefix.
  case "$2" in
    *)
      _dune_add_reply_files "$1"
      ;;
  esac
}

_dune_pkg__print-solver-env() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      _dune_pkg__print-solver-env__complete_positional_args "$2" "$positional_argument_index"
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --manpage --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --debug-cache)
            # completions for: print-solver-env pkg --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: print-solver-env pkg
            # --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: print-solver-env pkg
            # --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: print-solver-env pkg --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: print-solver-env pkg -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: print-solver-env pkg --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: print-solver-env pkg
            # --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: print-solver-env pkg --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: print-solver-env pkg
            # --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: print-solver-env pkg
            # --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: print-solver-env pkg --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: print-solver-env pkg -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: print-solver-env pkg
            # --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: print-solver-env pkg --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: print-solver-env pkg
            # --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: print-solver-env pkg
            # --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: print-solver-env pkg
            # --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: print-solver-env pkg
            # --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: print-solver-env pkg --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: print-solver-env pkg --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: print-solver-env pkg --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: print-solver-env pkg
            # --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: print-solver-env pkg --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: print-solver-env pkg --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: print-solver-env pkg --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: print-solver-env pkg --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: print-solver-env pkg --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --error-reporting)
            # completions for: print-solver-env pkg
            # --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --display-separate-messages | --debug-cache | --watch-exclusions | --instrument-with | --store-orig-source-dir | --trace-extended | --diff-command | -x | --dump-gc-stats | --dump-memo-graph-format | --print-metrics | --force | -f | --workspace | --debug-package-logs | --debug-load-dir | --debug-backtraces | --action-stdout-on-success | --cache-storage-mode | --verbose | --sandbox | -j | --terminal-persistence | --cache | --cache-check-probability | --action-stderr-on-success | --debug-dependency-path | --debug-artifact-substitution | --debug-digests | --no-buffer | --auto-promote | --watch | -w | --dump-memo-graph | --dump-memo-graph-with-timing | --release | --ignore-lock-dir | --promote-install-files | --default-target | --ignore-promoted-rules | --root | --config-file | --always-show-command-line | --require-dune-project-file | --only-packages | --profile | --build-dir | --trace-file | --no-print-directory | --build-info | --file-watcher | --wait-for-filesystem-clock | --error-reporting | --stop-on-first-error | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_pkg__outdated__complete_positional_args() {
  # Takes the portion of the word under the cursor before the cursor and the
  # index of the current positional argument on the command line and adds comp
  # replies for that positional argument begining with that prefix.
  case "$2" in
    *)
      _dune_add_reply_files "$1"
      ;;
  esac
}

_dune_pkg__outdated() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      _dune_pkg__outdated__complete_positional_args "$2" "$positional_argument_index"
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --manpage --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --transitive --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --error-reporting)
            # completions for: outdated pkg --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: outdated pkg --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: outdated pkg --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: outdated pkg --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: outdated pkg --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: outdated pkg --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: outdated pkg
            # --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: outdated pkg --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: outdated pkg --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: outdated pkg --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: outdated pkg --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: outdated pkg --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: outdated pkg
            # --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: outdated pkg
            # --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: outdated pkg --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: outdated pkg --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: outdated pkg -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: outdated pkg --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: outdated pkg --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: outdated pkg
            # --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: outdated pkg --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: outdated pkg --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: outdated pkg --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: outdated pkg -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: outdated pkg --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: outdated pkg --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: outdated pkg --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --debug-cache)
            # completions for: outdated pkg --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --transitive | --stop-on-first-error | --error-reporting | --wait-for-filesystem-clock | --file-watcher | --build-info | --no-print-directory | --trace-file | --build-dir | --profile | --only-packages | --require-dune-project-file | --always-show-command-line | --config-file | --root | --ignore-promoted-rules | --default-target | --promote-install-files | --ignore-lock-dir | --release | --dump-memo-graph-with-timing | --dump-memo-graph | --watch | -w | --auto-promote | --no-buffer | --debug-digests | --debug-artifact-substitution | --debug-dependency-path | --action-stderr-on-success | --cache-check-probability | --cache | --terminal-persistence | -j | --sandbox | --verbose | --cache-storage-mode | --action-stdout-on-success | --debug-backtraces | --debug-load-dir | --debug-package-logs | --workspace | --force | -f | --print-metrics | --dump-memo-graph-format | --dump-gc-stats | -x | --diff-command | --trace-extended | --store-orig-source-dir | --instrument-with | --watch-exclusions | --debug-cache | --display-separate-messages | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_pkg__validate-lockdir__complete_positional_args() {
  # Takes the portion of the word under the cursor before the cursor and the
  # index of the current positional argument on the command line and adds comp
  # replies for that positional argument begining with that prefix.
  case "$2" in
    *)
      _dune_add_reply_files "$1"
      ;;
  esac
}

_dune_pkg__validate-lockdir() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      _dune_pkg__validate-lockdir__complete_positional_args "$2" "$positional_argument_index"
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --manpage --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --debug-cache)
            # completions for: validate-lockdir pkg --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: validate-lockdir pkg
            # --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: validate-lockdir pkg
            # --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: validate-lockdir pkg --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: validate-lockdir pkg -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: validate-lockdir pkg --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: validate-lockdir pkg
            # --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: validate-lockdir pkg --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: validate-lockdir pkg
            # --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: validate-lockdir pkg
            # --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: validate-lockdir pkg --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: validate-lockdir pkg -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: validate-lockdir pkg
            # --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: validate-lockdir pkg --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: validate-lockdir pkg
            # --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: validate-lockdir pkg
            # --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: validate-lockdir pkg
            # --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: validate-lockdir pkg
            # --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: validate-lockdir pkg --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: validate-lockdir pkg --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: validate-lockdir pkg --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: validate-lockdir pkg
            # --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: validate-lockdir pkg --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: validate-lockdir pkg --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: validate-lockdir pkg --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: validate-lockdir pkg --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: validate-lockdir pkg --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --error-reporting)
            # completions for: validate-lockdir pkg
            # --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --display-separate-messages | --debug-cache | --watch-exclusions | --instrument-with | --store-orig-source-dir | --trace-extended | --diff-command | -x | --dump-gc-stats | --dump-memo-graph-format | --print-metrics | --force | -f | --workspace | --debug-package-logs | --debug-load-dir | --debug-backtraces | --action-stdout-on-success | --cache-storage-mode | --verbose | --sandbox | -j | --terminal-persistence | --cache | --cache-check-probability | --action-stderr-on-success | --debug-dependency-path | --debug-artifact-substitution | --debug-digests | --no-buffer | --auto-promote | --watch | -w | --dump-memo-graph | --dump-memo-graph-with-timing | --release | --ignore-lock-dir | --promote-install-files | --default-target | --ignore-promoted-rules | --root | --config-file | --always-show-command-line | --require-dune-project-file | --only-packages | --profile | --build-dir | --trace-file | --no-print-directory | --build-info | --file-watcher | --wait-for-filesystem-clock | --error-reporting | --stop-on-first-error | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_pkg() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      _dune_add_reply_fixed "$2" "lock print-solver-env outdated validate-lockdir"
      # This is where we would add completions for positional arguments,
      # however this command has no positional arguments
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--help --manpage -h"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
        esac
      fi
      case "$current_word" in
        --help | -h | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        lock)
          _dune_pkg__lock "$1" "$2" "$3"
          return "$?"
          ;;
        print-solver-env)
          _dune_pkg__print-solver-env "$1" "$2" "$3"
          return "$?"
          ;;
        outdated)
          _dune_pkg__outdated "$1" "$2" "$3"
          return "$?"
          ;;
        validate-lockdir)
          _dune_pkg__validate-lockdir "$1" "$2" "$3"
          return "$?"
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_package__lock__complete_positional_args() {
  # Takes the portion of the word under the cursor before the cursor and the
  # index of the current positional argument on the command line and adds comp
  # replies for that positional argument begining with that prefix.
  case "$2" in
    *)
      _dune_add_reply_files "$1"
      ;;
  esac
}

_dune_package__lock() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      _dune_package__lock__complete_positional_args "$2" "$positional_argument_index"
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --manpage --no-buffer --no-print-directory --only-packages --print-metrics --print-perf-stats --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --version-preference --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --debug-cache)
            # completions for: lock package --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: lock package --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: lock package --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: lock package --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: lock package -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: lock package --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: lock package --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: lock package --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: lock package
            # --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: lock package --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: lock package --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: lock package -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: lock package --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: lock package --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: lock package
            # --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: lock package
            # --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: lock package --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: lock package --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: lock package --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: lock package --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: lock package --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: lock package
            # --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: lock package --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: lock package --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: lock package --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: lock package --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: lock package --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --error-reporting)
            # completions for: lock package --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --version-preference)
            # completions for: lock package --version-preference
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --display-separate-messages | --debug-cache | --watch-exclusions | --instrument-with | --store-orig-source-dir | --trace-extended | --diff-command | -x | --dump-gc-stats | --dump-memo-graph-format | --print-metrics | --force | -f | --workspace | --debug-package-logs | --debug-load-dir | --debug-backtraces | --action-stdout-on-success | --cache-storage-mode | --verbose | --sandbox | -j | --terminal-persistence | --cache | --cache-check-probability | --action-stderr-on-success | --debug-dependency-path | --debug-artifact-substitution | --debug-digests | --no-buffer | --auto-promote | --watch | -w | --dump-memo-graph | --dump-memo-graph-with-timing | --release | --ignore-lock-dir | --promote-install-files | --default-target | --ignore-promoted-rules | --root | --config-file | --always-show-command-line | --require-dune-project-file | --only-packages | --profile | --build-dir | --trace-file | --no-print-directory | --build-info | --file-watcher | --wait-for-filesystem-clock | --error-reporting | --stop-on-first-error | --version-preference | --print-perf-stats | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_package__print-solver-env__complete_positional_args() {
  # Takes the portion of the word under the cursor before the cursor and the
  # index of the current positional argument on the command line and adds comp
  # replies for that positional argument begining with that prefix.
  case "$2" in
    *)
      _dune_add_reply_files "$1"
      ;;
  esac
}

_dune_package__print-solver-env() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      _dune_package__print-solver-env__complete_positional_args "$2" "$positional_argument_index"
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --manpage --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --debug-cache)
            # completions for: print-solver-env package
            # --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: print-solver-env package
            # --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: print-solver-env package
            # --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: print-solver-env package
            # --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: print-solver-env package -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: print-solver-env package
            # --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: print-solver-env package
            # --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: print-solver-env package --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: print-solver-env package
            # --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: print-solver-env package
            # --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: print-solver-env package --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: print-solver-env package -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: print-solver-env package
            # --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: print-solver-env package --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: print-solver-env package
            # --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: print-solver-env package
            # --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: print-solver-env package
            # --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: print-solver-env package
            # --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: print-solver-env package
            # --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: print-solver-env package --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: print-solver-env package
            # --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: print-solver-env package
            # --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: print-solver-env package
            # --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: print-solver-env package --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: print-solver-env package --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: print-solver-env package --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: print-solver-env package
            # --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --error-reporting)
            # completions for: print-solver-env package
            # --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --display-separate-messages | --debug-cache | --watch-exclusions | --instrument-with | --store-orig-source-dir | --trace-extended | --diff-command | -x | --dump-gc-stats | --dump-memo-graph-format | --print-metrics | --force | -f | --workspace | --debug-package-logs | --debug-load-dir | --debug-backtraces | --action-stdout-on-success | --cache-storage-mode | --verbose | --sandbox | -j | --terminal-persistence | --cache | --cache-check-probability | --action-stderr-on-success | --debug-dependency-path | --debug-artifact-substitution | --debug-digests | --no-buffer | --auto-promote | --watch | -w | --dump-memo-graph | --dump-memo-graph-with-timing | --release | --ignore-lock-dir | --promote-install-files | --default-target | --ignore-promoted-rules | --root | --config-file | --always-show-command-line | --require-dune-project-file | --only-packages | --profile | --build-dir | --trace-file | --no-print-directory | --build-info | --file-watcher | --wait-for-filesystem-clock | --error-reporting | --stop-on-first-error | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_package__outdated__complete_positional_args() {
  # Takes the portion of the word under the cursor before the cursor and the
  # index of the current positional argument on the command line and adds comp
  # replies for that positional argument begining with that prefix.
  case "$2" in
    *)
      _dune_add_reply_files "$1"
      ;;
  esac
}

_dune_package__outdated() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      _dune_package__outdated__complete_positional_args "$2" "$positional_argument_index"
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --manpage --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --transitive --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --error-reporting)
            # completions for: outdated package --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: outdated package --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: outdated package --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: outdated package --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: outdated package --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: outdated package --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: outdated package
            # --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: outdated package --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: outdated package --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: outdated package --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: outdated package
            # --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: outdated package --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: outdated package
            # --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: outdated package
            # --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: outdated package --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: outdated package
            # --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: outdated package -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: outdated package --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: outdated package --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: outdated package
            # --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: outdated package --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: outdated package
            # --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: outdated package --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: outdated package -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: outdated package --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: outdated package --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: outdated package --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --debug-cache)
            # completions for: outdated package --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --transitive | --stop-on-first-error | --error-reporting | --wait-for-filesystem-clock | --file-watcher | --build-info | --no-print-directory | --trace-file | --build-dir | --profile | --only-packages | --require-dune-project-file | --always-show-command-line | --config-file | --root | --ignore-promoted-rules | --default-target | --promote-install-files | --ignore-lock-dir | --release | --dump-memo-graph-with-timing | --dump-memo-graph | --watch | -w | --auto-promote | --no-buffer | --debug-digests | --debug-artifact-substitution | --debug-dependency-path | --action-stderr-on-success | --cache-check-probability | --cache | --terminal-persistence | -j | --sandbox | --verbose | --cache-storage-mode | --action-stdout-on-success | --debug-backtraces | --debug-load-dir | --debug-package-logs | --workspace | --force | -f | --print-metrics | --dump-memo-graph-format | --dump-gc-stats | -x | --diff-command | --trace-extended | --store-orig-source-dir | --instrument-with | --watch-exclusions | --debug-cache | --display-separate-messages | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_package__validate-lockdir__complete_positional_args() {
  # Takes the portion of the word under the cursor before the cursor and the
  # index of the current positional argument on the command line and adds comp
  # replies for that positional argument begining with that prefix.
  case "$2" in
    *)
      _dune_add_reply_files "$1"
      ;;
  esac
}

_dune_package__validate-lockdir() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      _dune_package__validate-lockdir__complete_positional_args "$2" "$positional_argument_index"
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --manpage --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --debug-cache)
            # completions for: validate-lockdir package
            # --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: validate-lockdir package
            # --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: validate-lockdir package
            # --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: validate-lockdir package
            # --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: validate-lockdir package -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: validate-lockdir package
            # --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: validate-lockdir package
            # --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: validate-lockdir package --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: validate-lockdir package
            # --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: validate-lockdir package
            # --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: validate-lockdir package --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: validate-lockdir package -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: validate-lockdir package
            # --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: validate-lockdir package --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: validate-lockdir package
            # --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: validate-lockdir package
            # --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: validate-lockdir package
            # --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: validate-lockdir package
            # --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: validate-lockdir package
            # --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: validate-lockdir package --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: validate-lockdir package
            # --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: validate-lockdir package
            # --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: validate-lockdir package
            # --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: validate-lockdir package --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: validate-lockdir package --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: validate-lockdir package --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: validate-lockdir package
            # --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --error-reporting)
            # completions for: validate-lockdir package
            # --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --display-separate-messages | --debug-cache | --watch-exclusions | --instrument-with | --store-orig-source-dir | --trace-extended | --diff-command | -x | --dump-gc-stats | --dump-memo-graph-format | --print-metrics | --force | -f | --workspace | --debug-package-logs | --debug-load-dir | --debug-backtraces | --action-stdout-on-success | --cache-storage-mode | --verbose | --sandbox | -j | --terminal-persistence | --cache | --cache-check-probability | --action-stderr-on-success | --debug-dependency-path | --debug-artifact-substitution | --debug-digests | --no-buffer | --auto-promote | --watch | -w | --dump-memo-graph | --dump-memo-graph-with-timing | --release | --ignore-lock-dir | --promote-install-files | --default-target | --ignore-promoted-rules | --root | --config-file | --always-show-command-line | --require-dune-project-file | --only-packages | --profile | --build-dir | --trace-file | --no-print-directory | --build-info | --file-watcher | --wait-for-filesystem-clock | --error-reporting | --stop-on-first-error | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_package() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      _dune_add_reply_fixed "$2" "lock print-solver-env outdated validate-lockdir"
      # This is where we would add completions for positional arguments,
      # however this command has no positional arguments
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--help --manpage -h"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
        esac
      fi
      case "$current_word" in
        --help | -h | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        lock)
          _dune_package__lock "$1" "$2" "$3"
          return "$?"
          ;;
        print-solver-env)
          _dune_package__print-solver-env "$1" "$2" "$3"
          return "$?"
          ;;
        outdated)
          _dune_package__outdated "$1" "$2" "$3"
          return "$?"
          ;;
        validate-lockdir)
          _dune_package__validate-lockdir "$1" "$2" "$3"
          return "$?"
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_tools__exec__ocamlformat__complete_positional_args() {
  # Takes the portion of the word under the cursor before the cursor and the
  # index of the current positional argument on the command line and adds comp
  # replies for that positional argument begining with that prefix.
  case "$2" in
    *)
      _dune_add_reply_files "$1"
      ;;
  esac
}

_dune_tools__exec__ocamlformat() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      _dune_tools__exec__ocamlformat__complete_positional_args "$2" "$positional_argument_index"
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --manpage --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --debug-cache)
            # completions for: ocamlformat exec tools --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: ocamlformat exec tools
            # --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: ocamlformat exec tools
            # --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: ocamlformat exec tools --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: ocamlformat exec tools -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: ocamlformat exec tools
            # --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: ocamlformat exec tools
            # --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: ocamlformat exec tools --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: ocamlformat exec tools
            # --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: ocamlformat exec tools
            # --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: ocamlformat exec tools --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: ocamlformat exec tools -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: ocamlformat exec tools
            # --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: ocamlformat exec tools --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: ocamlformat exec tools
            # --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: ocamlformat exec tools
            # --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: ocamlformat exec tools
            # --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: ocamlformat exec tools
            # --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: ocamlformat exec tools
            # --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: ocamlformat exec tools --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: ocamlformat exec tools --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: ocamlformat exec tools
            # --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: ocamlformat exec tools
            # --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: ocamlformat exec tools --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: ocamlformat exec tools --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: ocamlformat exec tools --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: ocamlformat exec tools --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --error-reporting)
            # completions for: ocamlformat exec tools
            # --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --display-separate-messages | --debug-cache | --watch-exclusions | --instrument-with | --store-orig-source-dir | --trace-extended | --diff-command | -x | --dump-gc-stats | --dump-memo-graph-format | --print-metrics | --force | -f | --workspace | --debug-package-logs | --debug-load-dir | --debug-backtraces | --action-stdout-on-success | --cache-storage-mode | --verbose | --sandbox | -j | --terminal-persistence | --cache | --cache-check-probability | --action-stderr-on-success | --debug-dependency-path | --debug-artifact-substitution | --debug-digests | --no-buffer | --auto-promote | --watch | -w | --dump-memo-graph | --dump-memo-graph-with-timing | --release | --ignore-lock-dir | --promote-install-files | --default-target | --ignore-promoted-rules | --root | --config-file | --always-show-command-line | --require-dune-project-file | --only-packages | --profile | --build-dir | --trace-file | --no-print-directory | --build-info | --file-watcher | --wait-for-filesystem-clock | --error-reporting | --stop-on-first-error | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_tools__exec__ocamllsp__complete_positional_args() {
  # Takes the portion of the word under the cursor before the cursor and the
  # index of the current positional argument on the command line and adds comp
  # replies for that positional argument begining with that prefix.
  case "$2" in
    *)
      _dune_add_reply_files "$1"
      ;;
  esac
}

_dune_tools__exec__ocamllsp() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      _dune_tools__exec__ocamllsp__complete_positional_args "$2" "$positional_argument_index"
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --manpage --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --debug-cache)
            # completions for: ocamllsp exec tools --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: ocamllsp exec tools
            # --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: ocamllsp exec tools --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: ocamllsp exec tools --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: ocamllsp exec tools -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: ocamllsp exec tools --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: ocamllsp exec tools
            # --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: ocamllsp exec tools --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: ocamllsp exec tools
            # --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: ocamllsp exec tools
            # --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: ocamllsp exec tools --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: ocamllsp exec tools -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: ocamllsp exec tools
            # --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: ocamllsp exec tools --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: ocamllsp exec tools
            # --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: ocamllsp exec tools
            # --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: ocamllsp exec tools --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: ocamllsp exec tools
            # --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: ocamllsp exec tools --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: ocamllsp exec tools --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: ocamllsp exec tools --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: ocamllsp exec tools
            # --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: ocamllsp exec tools --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: ocamllsp exec tools --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: ocamllsp exec tools --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: ocamllsp exec tools --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: ocamllsp exec tools --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --error-reporting)
            # completions for: ocamllsp exec tools --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --display-separate-messages | --debug-cache | --watch-exclusions | --instrument-with | --store-orig-source-dir | --trace-extended | --diff-command | -x | --dump-gc-stats | --dump-memo-graph-format | --print-metrics | --force | -f | --workspace | --debug-package-logs | --debug-load-dir | --debug-backtraces | --action-stdout-on-success | --cache-storage-mode | --verbose | --sandbox | -j | --terminal-persistence | --cache | --cache-check-probability | --action-stderr-on-success | --debug-dependency-path | --debug-artifact-substitution | --debug-digests | --no-buffer | --auto-promote | --watch | -w | --dump-memo-graph | --dump-memo-graph-with-timing | --release | --ignore-lock-dir | --promote-install-files | --default-target | --ignore-promoted-rules | --root | --config-file | --always-show-command-line | --require-dune-project-file | --only-packages | --profile | --build-dir | --trace-file | --no-print-directory | --build-info | --file-watcher | --wait-for-filesystem-clock | --error-reporting | --stop-on-first-error | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_tools__exec() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      _dune_add_reply_fixed "$2" "ocamlformat ocamllsp"
      # This is where we would add completions for positional arguments,
      # however this command has no positional arguments
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--help --manpage -h"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
        esac
      fi
      case "$current_word" in
        --help | -h | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        ocamlformat)
          _dune_tools__exec__ocamlformat "$1" "$2" "$3"
          return "$?"
          ;;
        ocamllsp)
          _dune_tools__exec__ocamllsp "$1" "$2" "$3"
          return "$?"
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_tools__which__ocamlformat() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      # This is where we would add completions for positional arguments,
      # however this command has no positional arguments
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --manpage --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --error-reporting)
            # completions for: ocamlformat which tools
            # --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: ocamlformat which tools
            # --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: ocamlformat which tools --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: ocamlformat which tools --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: ocamlformat which tools --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: ocamlformat which tools
            # --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: ocamlformat which tools
            # --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: ocamlformat which tools --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: ocamlformat which tools --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: ocamlformat which tools
            # --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: ocamlformat which tools
            # --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: ocamlformat which tools
            # --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: ocamlformat which tools
            # --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: ocamlformat which tools
            # --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: ocamlformat which tools --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: ocamlformat which tools
            # --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: ocamlformat which tools -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: ocamlformat which tools --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: ocamlformat which tools
            # --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: ocamlformat which tools
            # --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: ocamlformat which tools --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: ocamlformat which tools
            # --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: ocamlformat which tools
            # --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: ocamlformat which tools -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: ocamlformat which tools
            # --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: ocamlformat which tools
            # --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: ocamlformat which tools
            # --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --debug-cache)
            # completions for: ocamlformat which tools --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --stop-on-first-error | --error-reporting | --wait-for-filesystem-clock | --file-watcher | --build-info | --no-print-directory | --trace-file | --build-dir | --profile | --only-packages | --require-dune-project-file | --always-show-command-line | --config-file | --root | --ignore-promoted-rules | --default-target | --promote-install-files | --ignore-lock-dir | --release | --dump-memo-graph-with-timing | --dump-memo-graph | --watch | -w | --auto-promote | --no-buffer | --debug-digests | --debug-artifact-substitution | --debug-dependency-path | --action-stderr-on-success | --cache-check-probability | --cache | --terminal-persistence | -j | --sandbox | --verbose | --cache-storage-mode | --action-stdout-on-success | --debug-backtraces | --debug-load-dir | --debug-package-logs | --workspace | --force | -f | --print-metrics | --dump-memo-graph-format | --dump-gc-stats | -x | --diff-command | --trace-extended | --store-orig-source-dir | --instrument-with | --watch-exclusions | --debug-cache | --display-separate-messages | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_tools__which__ocamllsp() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      # This is where we would add completions for subcommands however
      # this command has no subcommands.
      # This is where we would add completions for positional arguments,
      # however this command has no positional arguments
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --manpage --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
          --error-reporting)
            # completions for: ocamllsp which tools
            # --error-reporting
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --file-watcher)
            # completions for: ocamllsp which tools --file-watcher
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --trace-file)
            # completions for: ocamllsp which tools --trace-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --build-dir)
            # completions for: ocamllsp which tools --build-dir
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --profile)
            # completions for: ocamllsp which tools --profile
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --only-packages)
            # completions for: ocamllsp which tools --only-packages
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --require-dune-project-file)
            # completions for: ocamllsp which tools
            # --require-dune-project-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --config-file)
            # completions for: ocamllsp which tools --config-file
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --root)
            # completions for: ocamllsp which tools --root
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --default-target)
            # completions for: ocamllsp which tools --default-target
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --promote-install-files)
            # completions for: ocamllsp which tools
            # --promote-install-files
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph)
            # completions for: ocamllsp which tools
            # --dump-memo-graph
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stderr-on-success)
            # completions for: ocamllsp which tools
            # --action-stderr-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-check-probability)
            # completions for: ocamllsp which tools
            # --cache-check-probability
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache)
            # completions for: ocamllsp which tools --cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --terminal-persistence)
            # completions for: ocamllsp which tools
            # --terminal-persistence
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -j)
            # completions for: ocamllsp which tools -j
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --sandbox)
            # completions for: ocamllsp which tools --sandbox
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --cache-storage-mode)
            # completions for: ocamllsp which tools
            # --cache-storage-mode
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --action-stdout-on-success)
            # completions for: ocamllsp which tools
            # --action-stdout-on-success
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --workspace)
            # completions for: ocamllsp which tools --workspace
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-memo-graph-format)
            # completions for: ocamllsp which tools
            # --dump-memo-graph-format
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --dump-gc-stats)
            # completions for: ocamllsp which tools --dump-gc-stats
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          -x)
            # completions for: ocamllsp which tools -x
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --diff-command)
            # completions for: ocamllsp which tools --diff-command
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --instrument-with)
            # completions for: ocamllsp which tools
            # --instrument-with
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --watch-exclusions)
            # completions for: ocamllsp which tools
            # --watch-exclusions
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
          --debug-cache)
            # completions for: ocamllsp which tools --debug-cache
            _dune_add_reply_files "$2"
            return "$_dune_STATUS_DONE"
            ;;
        esac
      fi
      case "$current_word" in
        --help | -h | --stop-on-first-error | --error-reporting | --wait-for-filesystem-clock | --file-watcher | --build-info | --no-print-directory | --trace-file | --build-dir | --profile | --only-packages | --require-dune-project-file | --always-show-command-line | --config-file | --root | --ignore-promoted-rules | --default-target | --promote-install-files | --ignore-lock-dir | --release | --dump-memo-graph-with-timing | --dump-memo-graph | --watch | -w | --auto-promote | --no-buffer | --debug-digests | --debug-artifact-substitution | --debug-dependency-path | --action-stderr-on-success | --cache-check-probability | --cache | --terminal-persistence | -j | --sandbox | --verbose | --cache-storage-mode | --action-stdout-on-success | --debug-backtraces | --debug-load-dir | --debug-package-logs | --workspace | --force | -f | --print-metrics | --dump-memo-graph-format | --dump-gc-stats | -x | --diff-command | --trace-extended | --store-orig-source-dir | --instrument-with | --watch-exclusions | --debug-cache | --display-separate-messages | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_tools__which() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      _dune_add_reply_fixed "$2" "ocamlformat ocamllsp"
      # This is where we would add completions for positional arguments,
      # however this command has no positional arguments
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--help --manpage -h"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
        esac
      fi
      case "$current_word" in
        --help | -h | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        ocamlformat)
          _dune_tools__which__ocamlformat "$1" "$2" "$3"
          return "$?"
          ;;
        ocamllsp)
          _dune_tools__which__ocamllsp "$1" "$2" "$3"
          return "$?"
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_tools() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      _dune_add_reply_fixed "$2" "exec which"
      # This is where we would add completions for positional arguments,
      # however this command has no positional arguments
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--help --manpage -h"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
        esac
      fi
      case "$current_word" in
        --help | -h | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        exec)
          _dune_tools__exec "$1" "$2" "$3"
          return "$?"
          ;;
        which)
          _dune_tools__which "$1" "$2" "$3"
          return "$?"
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

_dune_() {
  local prev_word_was_named_argumen_with_value="0" positional_argument_index="0"
  while true; do
    if _dune_comp_words_traverse_is_past_cursor; then
      return "$_dune_WORD_INDEX_PAST_CURSOR"
    fi
    if _dune_comp_words_traverse_is_at_cursor; then
      # Try to complete subcommands and positional arguments first.
      _dune_add_reply_fixed "$2" "runtest test installed-libraries external-lib-deps build fmt clean install uninstall exec subst rules utop promote printenv help format-dune-file upgrade cache top ocaml-merlin shutdown diagnostics monitor ocaml coq describe show rpc internal init promotion pkg package tools"
      # This is where we would add completions for positional arguments,
      # however this command has no positional arguments
      if [ "${#COMPREPLY[@]}" == "0" ]; then
        # If there were no suggestions for subcommands or positional
        # arguments, try completing named arguments instead.
        _dune_add_reply_fixed "$2" "--help --manpage -h"
      fi
      return "$_dune_STATUS_DONE"
    else
      local current_word status_
      current_word=$(_dune_comp_words_traverse_get_current)
      status_=$?
      if [ "$status_" -ne 0 ]; then
        return "$status_"
      fi
      _dune_comp_words_traverse_advance
      if _dune_comp_words_traverse_is_past_cursor; then
        # Bounds check to catch errors in the implementation of the
        # completion script
        return "$_dune_WORD_INDEX_PAST_CURSOR"
      fi
      if _dune_comp_words_traverse_is_at_cursor; then
        # The parser has reached the word under the cursor. Attempt to
        # complete it and then exit.
        case "$current_word" in
        esac
      fi
      case "$current_word" in
        --help | -h | --manpage)
          prev_word_was_named_argumen_with_value=1
          ;;
        runtest)
          _dune_runtest "$1" "$2" "$3"
          return "$?"
          ;;
        test)
          _dune_test "$1" "$2" "$3"
          return "$?"
          ;;
        installed-libraries)
          _dune_installed-libraries "$1" "$2" "$3"
          return "$?"
          ;;
        external-lib-deps)
          _dune_external-lib-deps "$1" "$2" "$3"
          return "$?"
          ;;
        build)
          _dune_build "$1" "$2" "$3"
          return "$?"
          ;;
        fmt)
          _dune_fmt "$1" "$2" "$3"
          return "$?"
          ;;
        clean)
          _dune_clean "$1" "$2" "$3"
          return "$?"
          ;;
        install)
          _dune_install "$1" "$2" "$3"
          return "$?"
          ;;
        uninstall)
          _dune_uninstall "$1" "$2" "$3"
          return "$?"
          ;;
        exec)
          _dune_exec "$1" "$2" "$3"
          return "$?"
          ;;
        subst)
          _dune_subst "$1" "$2" "$3"
          return "$?"
          ;;
        rules)
          _dune_rules "$1" "$2" "$3"
          return "$?"
          ;;
        utop)
          _dune_utop "$1" "$2" "$3"
          return "$?"
          ;;
        promote)
          _dune_promote "$1" "$2" "$3"
          return "$?"
          ;;
        printenv)
          _dune_printenv "$1" "$2" "$3"
          return "$?"
          ;;
        help)
          _dune_help "$1" "$2" "$3"
          return "$?"
          ;;
        format-dune-file)
          _dune_format-dune-file "$1" "$2" "$3"
          return "$?"
          ;;
        upgrade)
          _dune_upgrade "$1" "$2" "$3"
          return "$?"
          ;;
        cache)
          _dune_cache "$1" "$2" "$3"
          return "$?"
          ;;
        top)
          _dune_top "$1" "$2" "$3"
          return "$?"
          ;;
        ocaml-merlin)
          _dune_ocaml-merlin "$1" "$2" "$3"
          return "$?"
          ;;
        shutdown)
          _dune_shutdown "$1" "$2" "$3"
          return "$?"
          ;;
        diagnostics)
          _dune_diagnostics "$1" "$2" "$3"
          return "$?"
          ;;
        monitor)
          _dune_monitor "$1" "$2" "$3"
          return "$?"
          ;;
        ocaml)
          _dune_ocaml "$1" "$2" "$3"
          return "$?"
          ;;
        coq)
          _dune_coq "$1" "$2" "$3"
          return "$?"
          ;;
        describe)
          _dune_describe "$1" "$2" "$3"
          return "$?"
          ;;
        show)
          _dune_show "$1" "$2" "$3"
          return "$?"
          ;;
        rpc)
          _dune_rpc "$1" "$2" "$3"
          return "$?"
          ;;
        internal)
          _dune_internal "$1" "$2" "$3"
          return "$?"
          ;;
        init)
          _dune_init "$1" "$2" "$3"
          return "$?"
          ;;
        promotion)
          _dune_promotion "$1" "$2" "$3"
          return "$?"
          ;;
        pkg)
          _dune_pkg "$1" "$2" "$3"
          return "$?"
          ;;
        package)
          _dune_package "$1" "$2" "$3"
          return "$?"
          ;;
        tools)
          _dune_tools "$1" "$2" "$3"
          return "$?"
          ;;
        -*)
          # Ignore other words that look like arguments
          prev_word_was_named_argumen_with_value=0
          ;;
        *)
          if [ "$prev_word_was_named_argumen_with_value" -eq 0 ]; then
            positional_argument_index=$((positional_argument_index+1))
          fi
          prev_word_was_named_argumen_with_value=0
          ;;
      esac
    fi
  done
}

complete -F _dune_complete dune
