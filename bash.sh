#!/usr/bin/env bash
# Completion script for dune. Generated by climate.
_dune_complete() {
    _dune_i
    if [ "$COMP_CWORD" == "0" ]; then
        _dune_e "Unexpected \$COMP_CWORD value of 0. $COMP_CWORD should be at least 1 as the shell uses the first word of the command line to determine which completion script to run."
    elif [ "$(_dune_f)" -lt 2 ]; then
        _dune_e "Unexpected length of \$COMP_WORDS array: ${#COMP_WORDS[@]}. Its length should be at least 2 since the first element should always be the program name, and the second element will be the first word after the program name, which is expected to be the empty string if no additional words have been entered after the program name."
    else
        _dune_k
        _dune_nc "$1" "$2" "$3"
        case "$?" in
            100)
                :
                ;;
            102)
                _dune_e "Unexpected error in completion script: Traversed command line beyond the current cursor position"
                ;;
            101)
                _dune_e "Unexpected error in completion script: Traversed beyond the end of the command line"
                ;;
            *)
                _dune_e "Unknown error in completion script"
                ;;
        esac
    fi
}
_dune_a=100
_dune_b=101
_dune_c=102
_dune_d() {
    [ "$1" -gt "$_dune_a" ]
}
_dune_e() {
    echo "$1" > /dev/stderr
}
_dune_f() {
    echo "${#COMP_WORDS[@]}"
}
_dune_g() {
    local i=$1
    if [ "$i" -ge "$(_dune_f)" ]; then
        return "$_dune_b"
    fi
    echo "${COMP_WORDS[$i]}"
}
_dune_h=0
_dune_i() {
    _dune_h=0
}
_dune_j() {
    _dune_g "$_dune_h"
}
_dune_k() {
    _dune_h=$((_dune_h + 1))
}
_dune_l() {
    test "$_dune_h" -eq "$COMP_CWORD"
}
_dune_m() {
    test "$_dune_h" -gt "$COMP_CWORD"
}
_dune_n() {
    COMPREPLY+=($(compgen -A file -- "$1"))
}
_dune_o() {
    COMPREPLY+=($(compgen -W "$2" -- "$1"))
}
_dune_p() {
    local query_index=$1
    local current_word=$2
    local command suggestions
    command="dune --print-reentrant-completion-hints=$query_index -- $COMP_LINE"
    suggestions=$(eval "$command")
    COMPREPLY+=($(compgen -W "$suggestions" -- "$current_word"))
}
_dune_q() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --na --no-buffer --no-print-directory --not-available --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --instrument-with | --only-packages | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_r() {
    case "$2" in
        *)
            :
            ;;
    esac
}
_dune_s() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            _dune_r "$2" "$positional_argument_index"
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --missing --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --sexp --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --unstable-by-dir --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --instrument-with | --only-packages | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_t() {
    case "$2" in
        *)
            :
            ;;
    esac
}
_dune_u() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            _dune_t "$2" "$positional_argument_index"
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --instrument-with | --only-packages | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_v() {
    case "$2" in
        *)
            :
            ;;
    esac
}
_dune_w() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            _dune_v "$2" "$positional_argument_index"
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --instrument-with | --only-packages | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_x() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --no-buffer --no-print-directory --only-packages --preview --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --instrument-with | --only-packages | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_y() {
    case "$2" in
        *)
            :
            ;;
    esac
}
_dune_z() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            _dune_y "$2" "$positional_argument_index"
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --instrument-with | --only-packages | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_A() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --instrument-with | --only-packages | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_B() {
    case "$2" in
        *)
            :
            ;;
    esac
}
_dune_C() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            _dune_B "$2" "$positional_argument_index"
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --bindir --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --context --create-install-files --datadir --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --destdir --diff-command --display-separate-messages --docdir --dry-run --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --etcdir --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --libdir --libexecdir --mandir --no-buffer --no-print-directory --only-packages --prefix --print-metrics --profile --promote-install-files --release --relocatable --require-dune-project-file --root --sandbox --sbindir --sections --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --bindir | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --context | --datadir | --debug-cache | --default-target | --destdir | --diff-command | --docdir | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --etcdir | --file-watcher | --instrument-with | --libdir | --libexecdir | --mandir | --only-packages | --prefix | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --sbindir | --sections | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_D() {
    case "$2" in
        *)
            :
            ;;
    esac
}
_dune_E() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            _dune_D "$2" "$positional_argument_index"
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --bindir --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --context --create-install-files --datadir --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --destdir --diff-command --display-separate-messages --docdir --dry-run --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --etcdir --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --libdir --libexecdir --mandir --no-buffer --no-print-directory --only-packages --prefix --print-metrics --profile --promote-install-files --release --relocatable --require-dune-project-file --root --sandbox --sbindir --sections --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --bindir | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --context | --datadir | --debug-cache | --default-target | --destdir | --diff-command | --docdir | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --etcdir | --file-watcher | --instrument-with | --libdir | --libexecdir | --mandir | --only-packages | --prefix | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --sbindir | --sections | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_F() {
    case "$2" in
        0)
            :
            ;;
        *)
            :
            ;;
    esac
}
_dune_G() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            _dune_F "$2" "$positional_argument_index"
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --context --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --no-buffer --no-build --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --context | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --instrument-with | --only-packages | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_H() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--build-info --debug-backtraces --help -h"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_I() {
    case "$2" in
        *)
            :
            ;;
    esac
}
_dune_J() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            _dune_I "$2" "$positional_argument_index"
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --makefile --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --recursive --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -m -o -r -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --instrument-with | --only-packages | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -o | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_K() {
    case "$2" in
        0)
            :
            ;;
        *)
            :
            ;;
    esac
}
_dune_L() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            _dune_K "$2" "$positional_argument_index"
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --context --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --context | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --instrument-with | --only-packages | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_M() {
    case "$2" in
        *)
            :
            ;;
    esac
}
_dune_N() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            _dune_M "$2" "$positional_argument_index"
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --instrument-with | --only-packages | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_O() {
    case "$2" in
        0)
            :
            ;;
    esac
}
_dune_P() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            _dune_O "$2" "$positional_argument_index"
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --field --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --field | --file-watcher | --instrument-with | --only-packages | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_Q() {
    case "$2" in
        0)
            :
            ;;
    esac
}
_dune_R() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            _dune_Q "$2" "$positional_argument_index"
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--build-info --help -h"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_S() {
    case "$2" in
        0)
            :
            ;;
    esac
}
_dune_T() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            _dune_S "$2" "$positional_argument_index"
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--dune-version --help -h"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --dune-version)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_U() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --instrument-with | --only-packages | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_V() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--help --size --trimmed-size -h"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --size | --trimmed-size)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_W() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--help --machine-readable -h"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_X() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--help -h"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_Y() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            _dune_o "$2" "trim size clear"
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--help -h"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                trim)
                    _dune_V "$1" "$2" "$3"
                    return "$?"
                    ;;
                size)
                    _dune_W "$1" "$2" "$3"
                    return "$?"
                    ;;
                clear)
                    _dune_X "$1" "$2" "$3"
                    return "$?"
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_Z() {
    case "$2" in
        0)
            :
            ;;
    esac
}
_dune__a() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            _dune_Z "$2" "$positional_argument_index"
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --context --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --context | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --instrument-with | --only-packages | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_aa() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --context --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --context | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --instrument-with | --only-packages | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_ba() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --instrument-with | --only-packages | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_ca() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --instrument-with | --only-packages | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_da() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --quit-on-disconnect --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --instrument-with | --only-packages | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_ea() {
    case "$2" in
        0)
            :
            ;;
        *)
            :
            ;;
    esac
}
_dune_fa() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            _dune_ea "$2" "$positional_argument_index"
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --context --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --context | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --instrument-with | --only-packages | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_ga() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --context --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --context | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --instrument-with | --only-packages | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_ha() {
    case "$2" in
        0)
            :
            ;;
    esac
}
_dune_ia() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            _dune_ha "$2" "$positional_argument_index"
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --context --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --context | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --instrument-with | --only-packages | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_ja() {
    case "$2" in
        0)
            :
            ;;
    esac
}
_dune_ka() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            _dune_ja "$2" "$positional_argument_index"
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --context --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --context | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --instrument-with | --only-packages | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_la() {
    case "$2" in
        0)
            :
            ;;
    esac
}
_dune_ma() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            _dune_la "$2" "$positional_argument_index"
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --context --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --context | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --instrument-with | --only-packages | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_na() {
    case "$2" in
        0)
            :
            ;;
    esac
}
_dune_oa() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            _dune_na "$2" "$positional_argument_index"
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --context --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --context | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --instrument-with | --only-packages | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_pa() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --context --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --context | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --instrument-with | --only-packages | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_qa() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            _dune_o "$2" "dump-config start-session"
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--help -h"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                dump-config)
                    _dune_oa "$1" "$2" "$3"
                    return "$?"
                    ;;
                start-session)
                    _dune_pa "$1" "$2" "$3"
                    return "$?"
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_ra() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --instrument-with | --only-packages | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_sa() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            _dune_o "$2" "utop ocaml-merlin dump-dot-merlin top top-module merlin doc"
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--help -h"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                utop)
                    _dune_fa "$1" "$2" "$3"
                    return "$?"
                    ;;
                ocaml-merlin)
                    _dune_ga "$1" "$2" "$3"
                    return "$?"
                    ;;
                dump-dot-merlin)
                    _dune_ia "$1" "$2" "$3"
                    return "$?"
                    ;;
                top)
                    _dune_ka "$1" "$2" "$3"
                    return "$?"
                    ;;
                top-module)
                    _dune_ma "$1" "$2" "$3"
                    return "$?"
                    ;;
                merlin)
                    _dune_qa "$1" "$2" "$3"
                    return "$?"
                    ;;
                doc)
                    _dune_ra "$1" "$2" "$3"
                    return "$?"
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_ta() {
    case "$2" in
        0)
            :
            ;;
        *)
            :
            ;;
    esac
}
_dune_ua() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            _dune_ta "$2" "$positional_argument_index"
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --context --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --no-buffer --no-build --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --toplevel --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --context | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --instrument-with | --only-packages | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --toplevel | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_va() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            _dune_o "$2" "top"
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--help -h"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                top)
                    _dune_ua "$1" "$2" "$3"
                    return "$?"
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_wa() {
    case "$2" in
        *)
            :
            ;;
    esac
}
_dune_xa() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            _dune_wa "$2" "$positional_argument_index"
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --context --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --format --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --lang --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --sanitize-for-tests --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --with-deps --with-pps --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --context | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --format | --instrument-with | --lang | --only-packages | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_ya() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --context --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --format --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --lang --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --context | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --format | --instrument-with | --lang | --only-packages | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_za() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --format --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --lang --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --format | --instrument-with | --lang | --only-packages | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_Aa() {
    case "$2" in
        0)
            :
            ;;
    esac
}
_dune_Ba() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            _dune_Aa "$2" "$positional_argument_index"
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --context --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --lang --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --context | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --instrument-with | --lang | --only-packages | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_Ca() {
    case "$2" in
        0)
            :
            ;;
    esac
}
_dune_Da() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            _dune_Ca "$2" "$positional_argument_index"
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --field --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --field | --file-watcher | --instrument-with | --only-packages | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_Ea() {
    case "$2" in
        *)
            :
            ;;
    esac
}
_dune_Fa() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            _dune_Ea "$2" "$positional_argument_index"
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --makefile --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --recursive --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -m -o -r -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --instrument-with | --only-packages | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -o | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_Ga() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --na --no-buffer --no-print-directory --not-available --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --instrument-with | --only-packages | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_Ha() {
    case "$2" in
        *)
            :
            ;;
    esac
}
_dune_Ia() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            _dune_Ha "$2" "$positional_argument_index"
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --context --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --context | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --instrument-with | --only-packages | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_Ja() {
    case "$2" in
        *)
            :
            ;;
    esac
}
_dune_Ka() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            _dune_Ja "$2" "$positional_argument_index"
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --context --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --context | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --instrument-with | --only-packages | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_La() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --context --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --format --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --context | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --format | --instrument-with | --only-packages | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_Ma() {
    case "$2" in
        *)
            :
            ;;
    esac
}
_dune_Na() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            _dune_Ma "$2" "$positional_argument_index"
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --instrument-with | --only-packages | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_Oa() {
    case "$2" in
        *)
            :
            ;;
    esac
}
_dune_Pa() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            _dune_Oa "$2" "$positional_argument_index"
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --transitive --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --instrument-with | --only-packages | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_Qa() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --instrument-with | --only-packages | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_Ra() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            _dune_o "$2" "lock list-locked-dependencies dependency-hash"
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--help -h"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                lock)
                    _dune_Na "$1" "$2" "$3"
                    return "$?"
                    ;;
                list-locked-dependencies)
                    _dune_Pa "$1" "$2" "$3"
                    return "$?"
                    ;;
                dependency-hash)
                    _dune_Qa "$1" "$2" "$3"
                    return "$?"
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_Sa() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --instrument-with | --only-packages | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_Ta() {
    case "$2" in
        *)
            :
            ;;
    esac
}
_dune_Ua() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            _dune_o "$2" "workspace external-lib-deps opam-files pp env rules installed-libraries targets aliases package-entries pkg contexts"
            _dune_Ta "$2" "$positional_argument_index"
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --context --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --format --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --lang --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --sanitize-for-tests --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --with-deps --with-pps --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                workspace)
                    _dune_xa "$1" "$2" "$3"
                    return "$?"
                    ;;
                external-lib-deps)
                    _dune_ya "$1" "$2" "$3"
                    return "$?"
                    ;;
                opam-files)
                    _dune_za "$1" "$2" "$3"
                    return "$?"
                    ;;
                pp)
                    _dune_Ba "$1" "$2" "$3"
                    return "$?"
                    ;;
                env)
                    _dune_Da "$1" "$2" "$3"
                    return "$?"
                    ;;
                rules)
                    _dune_Fa "$1" "$2" "$3"
                    return "$?"
                    ;;
                installed-libraries)
                    _dune_Ga "$1" "$2" "$3"
                    return "$?"
                    ;;
                targets)
                    _dune_Ia "$1" "$2" "$3"
                    return "$?"
                    ;;
                aliases)
                    _dune_Ka "$1" "$2" "$3"
                    return "$?"
                    ;;
                package-entries)
                    _dune_La "$1" "$2" "$3"
                    return "$?"
                    ;;
                pkg)
                    _dune_Ra "$1" "$2" "$3"
                    return "$?"
                    ;;
                contexts)
                    _dune_Sa "$1" "$2" "$3"
                    return "$?"
                    ;;
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --context | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --format | --instrument-with | --lang | --only-packages | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_Va() {
    case "$2" in
        *)
            :
            ;;
    esac
}
_dune_Wa() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            _dune_Va "$2" "$positional_argument_index"
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --context --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --format --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --lang --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --sanitize-for-tests --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --with-deps --with-pps --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --context | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --format | --instrument-with | --lang | --only-packages | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_Xa() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --context --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --format --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --lang --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --context | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --format | --instrument-with | --lang | --only-packages | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_Ya() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --format --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --lang --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --format | --instrument-with | --lang | --only-packages | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_Za() {
    case "$2" in
        0)
            :
            ;;
    esac
}
_dune__b() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            _dune_Za "$2" "$positional_argument_index"
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --context --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --lang --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --context | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --instrument-with | --lang | --only-packages | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_ab() {
    case "$2" in
        0)
            :
            ;;
    esac
}
_dune_bb() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            _dune_ab "$2" "$positional_argument_index"
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --field --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --field | --file-watcher | --instrument-with | --only-packages | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_cb() {
    case "$2" in
        *)
            :
            ;;
    esac
}
_dune_db() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            _dune_cb "$2" "$positional_argument_index"
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --makefile --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --recursive --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -m -o -r -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --instrument-with | --only-packages | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -o | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_eb() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --na --no-buffer --no-print-directory --not-available --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --instrument-with | --only-packages | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_fb() {
    case "$2" in
        *)
            :
            ;;
    esac
}
_dune_gb() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            _dune_fb "$2" "$positional_argument_index"
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --context --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --context | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --instrument-with | --only-packages | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_hb() {
    case "$2" in
        *)
            :
            ;;
    esac
}
_dune_ib() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            _dune_hb "$2" "$positional_argument_index"
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --context --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --context | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --instrument-with | --only-packages | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_jb() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --context --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --format --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --context | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --format | --instrument-with | --only-packages | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_kb() {
    case "$2" in
        *)
            :
            ;;
    esac
}
_dune_lb() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            _dune_kb "$2" "$positional_argument_index"
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --instrument-with | --only-packages | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_mb() {
    case "$2" in
        *)
            :
            ;;
    esac
}
_dune_nb() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            _dune_mb "$2" "$positional_argument_index"
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --transitive --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --instrument-with | --only-packages | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_ob() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --instrument-with | --only-packages | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_pb() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            _dune_o "$2" "lock list-locked-dependencies dependency-hash"
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--help -h"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                lock)
                    _dune_lb "$1" "$2" "$3"
                    return "$?"
                    ;;
                list-locked-dependencies)
                    _dune_nb "$1" "$2" "$3"
                    return "$?"
                    ;;
                dependency-hash)
                    _dune_ob "$1" "$2" "$3"
                    return "$?"
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_qb() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --instrument-with | --only-packages | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_rb() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            _dune_o "$2" "workspace external-lib-deps opam-files pp env rules installed-libraries targets aliases package-entries pkg contexts"
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--help -h"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                workspace)
                    _dune_Wa "$1" "$2" "$3"
                    return "$?"
                    ;;
                external-lib-deps)
                    _dune_Xa "$1" "$2" "$3"
                    return "$?"
                    ;;
                opam-files)
                    _dune_Ya "$1" "$2" "$3"
                    return "$?"
                    ;;
                pp)
                    _dune__b "$1" "$2" "$3"
                    return "$?"
                    ;;
                env)
                    _dune_bb "$1" "$2" "$3"
                    return "$?"
                    ;;
                rules)
                    _dune_db "$1" "$2" "$3"
                    return "$?"
                    ;;
                installed-libraries)
                    _dune_eb "$1" "$2" "$3"
                    return "$?"
                    ;;
                targets)
                    _dune_gb "$1" "$2" "$3"
                    return "$?"
                    ;;
                aliases)
                    _dune_ib "$1" "$2" "$3"
                    return "$?"
                    ;;
                package-entries)
                    _dune_jb "$1" "$2" "$3"
                    return "$?"
                    ;;
                pkg)
                    _dune_pb "$1" "$2" "$3"
                    return "$?"
                    ;;
                contexts)
                    _dune_qb "$1" "$2" "$3"
                    return "$?"
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_sb() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --all --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --instrument-with | --only-packages | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_tb() {
    case "$2" in
        *)
            :
            ;;
    esac
}
_dune_ub() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            _dune_tb "$2" "$positional_argument_index"
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --instrument-with | --only-packages | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_vb() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --instrument-with | --only-packages | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_wb() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            _dune_o "$2" "status build ping"
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--help -h"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                status)
                    _dune_sb "$1" "$2" "$3"
                    return "$?"
                    ;;
                build)
                    _dune_ub "$1" "$2" "$3"
                    return "$?"
                    ;;
                ping)
                    _dune_vb "$1" "$2" "$3"
                    return "$?"
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_xb() {
    case "$2" in
        0)
            :
            ;;
    esac
}
_dune_yb() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            _dune_xb "$2" "$positional_argument_index"
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --instrument-with | --only-packages | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_zb() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--help -h"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_Ab() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--global-symbol-prefix --no-command-hash-in-function-names --program-exe-for-reentrant-query --program-name"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --global-symbol-prefix | --program-exe-for-reentrant-query | --program-name)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_Bb() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            _dune_o "$2" "dump latest-lang-version print-completion-script-bash"
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--help -h"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                dump)
                    _dune_yb "$1" "$2" "$3"
                    return "$?"
                    ;;
                latest-lang-version)
                    _dune_zb "$1" "$2" "$3"
                    return "$?"
                    ;;
                print-completion-script-bash)
                    _dune_Ab "$1" "$2" "$3"
                    return "$?"
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_Cb() {
    case "$2" in
        0)
            :
            ;;
        1)
            :
            ;;
    esac
}
_dune_Db() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            _dune_Cb "$2" "$positional_argument_index"
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --libs --no-buffer --no-print-directory --only-packages --ppx --print-metrics --profile --promote-install-files --public --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --instrument-with | --libs | --only-packages | --ppx | --profile | --promote-install-files | --public | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_Eb() {
    case "$2" in
        0)
            :
            ;;
        1)
            :
            ;;
    esac
}
_dune_Fb() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            _dune_Eb "$2" "$positional_argument_index"
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --inline-tests --instrument-with --kind --libs --no-buffer --no-print-directory --only-packages --pkg --ppx --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --instrument-with | --kind | --libs | --only-packages | --pkg | --ppx | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_Gb() {
    case "$2" in
        0)
            :
            ;;
        1)
            :
            ;;
    esac
}
_dune_Hb() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            _dune_Gb "$2" "$positional_argument_index"
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --inline-tests --instrument-with --libs --no-buffer --no-print-directory --only-packages --ppx --print-metrics --profile --promote-install-files --public --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --instrument-with | --libs | --only-packages | --ppx | --profile | --promote-install-files | --public | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_Ib() {
    case "$2" in
        0)
            :
            ;;
        1)
            :
            ;;
    esac
}
_dune_Jb() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            _dune_Ib "$2" "$positional_argument_index"
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --libs --no-buffer --no-print-directory --only-packages --ppx --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --instrument-with | --libs | --only-packages | --ppx | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_Kb() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            _dune_o "$2" "executable project library test"
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--help -h"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                executable)
                    _dune_Db "$1" "$2" "$3"
                    return "$?"
                    ;;
                project)
                    _dune_Fb "$1" "$2" "$3"
                    return "$?"
                    ;;
                library)
                    _dune_Hb "$1" "$2" "$3"
                    return "$?"
                    ;;
                test)
                    _dune_Jb "$1" "$2" "$3"
                    return "$?"
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_Lb() {
    case "$2" in
        *)
            :
            ;;
    esac
}
_dune_Mb() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            _dune_Lb "$2" "$positional_argument_index"
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --instrument-with | --only-packages | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_Nb() {
    case "$2" in
        *)
            :
            ;;
    esac
}
_dune_Ob() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            _dune_Nb "$2" "$positional_argument_index"
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --instrument-with | --only-packages | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_Pb() {
    case "$2" in
        *)
            :
            ;;
    esac
}
_dune_Qb() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            _dune_Pb "$2" "$positional_argument_index"
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --instrument-with | --only-packages | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_Rb() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            _dune_o "$2" "list apply diff"
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--help -h"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                list)
                    _dune_Mb "$1" "$2" "$3"
                    return "$?"
                    ;;
                apply)
                    _dune_Ob "$1" "$2" "$3"
                    return "$?"
                    ;;
                diff)
                    _dune_Qb "$1" "$2" "$3"
                    return "$?"
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_Sb() {
    case "$2" in
        *)
            :
            ;;
    esac
}
_dune_Tb() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            _dune_Sb "$2" "$positional_argument_index"
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --version-preference --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --instrument-with | --only-packages | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --version-preference | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_Ub() {
    case "$2" in
        *)
            :
            ;;
    esac
}
_dune_Vb() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            _dune_Ub "$2" "$positional_argument_index"
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --instrument-with | --only-packages | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_Wb() {
    case "$2" in
        *)
            :
            ;;
    esac
}
_dune_Xb() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            _dune_Wb "$2" "$positional_argument_index"
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --transitive --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --instrument-with | --only-packages | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_Yb() {
    case "$2" in
        *)
            :
            ;;
    esac
}
_dune_Zb() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            _dune_Yb "$2" "$positional_argument_index"
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --instrument-with | --only-packages | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune__c() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            _dune_o "$2" "lock print-solver-env outdated validate-lockdir"
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--help -h"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                lock)
                    _dune_Tb "$1" "$2" "$3"
                    return "$?"
                    ;;
                print-solver-env)
                    _dune_Vb "$1" "$2" "$3"
                    return "$?"
                    ;;
                outdated)
                    _dune_Xb "$1" "$2" "$3"
                    return "$?"
                    ;;
                validate-lockdir)
                    _dune_Zb "$1" "$2" "$3"
                    return "$?"
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_ac() {
    case "$2" in
        *)
            :
            ;;
    esac
}
_dune_bc() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            _dune_ac "$2" "$positional_argument_index"
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --version-preference --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --instrument-with | --only-packages | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --version-preference | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_cc() {
    case "$2" in
        *)
            :
            ;;
    esac
}
_dune_dc() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            _dune_cc "$2" "$positional_argument_index"
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --instrument-with | --only-packages | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_ec() {
    case "$2" in
        *)
            :
            ;;
    esac
}
_dune_fc() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            _dune_ec "$2" "$positional_argument_index"
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --transitive --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --instrument-with | --only-packages | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_gc() {
    case "$2" in
        *)
            :
            ;;
    esac
}
_dune_hc() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            _dune_gc "$2" "$positional_argument_index"
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --instrument-with | --only-packages | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_ic() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            _dune_o "$2" "lock print-solver-env outdated validate-lockdir"
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--help -h"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                lock)
                    _dune_bc "$1" "$2" "$3"
                    return "$?"
                    ;;
                print-solver-env)
                    _dune_dc "$1" "$2" "$3"
                    return "$?"
                    ;;
                outdated)
                    _dune_fc "$1" "$2" "$3"
                    return "$?"
                    ;;
                validate-lockdir)
                    _dune_hc "$1" "$2" "$3"
                    return "$?"
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_jc() {
    case "$2" in
        *)
            :
            ;;
    esac
}
_dune_kc() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            _dune_jc "$2" "$positional_argument_index"
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--action-stderr-on-success --action-stdout-on-success --always-show-command-line --auto-promote --build-dir --build-info --cache --cache-check-probability --cache-storage-mode --config-file --debug-artifact-substitution --debug-backtraces --debug-cache --debug-dependency-path --debug-digests --debug-load-dir --debug-package-logs --default-target --diff-command --display-separate-messages --dump-gc-stats --dump-memo-graph --dump-memo-graph-format --dump-memo-graph-with-timing --error-reporting --file-watcher --force --help --ignore-lock-dir --ignore-promoted-rules --instrument-with --no-buffer --no-print-directory --only-packages --print-metrics --profile --promote-install-files --release --require-dune-project-file --root --sandbox --stop-on-first-error --store-orig-source-dir --terminal-persistence --trace-extended --trace-file --verbose --wait-for-filesystem-clock --watch --watch-exclusions --workspace -f -h -j -w -x"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                --action-stderr-on-success | --action-stdout-on-success | --build-dir | --cache | --cache-check-probability | --cache-storage-mode | --config-file | --debug-cache | --default-target | --diff-command | --dump-gc-stats | --dump-memo-graph | --dump-memo-graph-format | --error-reporting | --file-watcher | --instrument-with | --only-packages | --profile | --promote-install-files | --require-dune-project-file | --root | --sandbox | --terminal-persistence | --trace-file | --watch-exclusions | --workspace | -j | -x)
                    if _dune_l; then
                        _dune_n "$2"
                        return "$_dune_a"
                    fi
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_lc() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            _dune_o "$2" "ocamllsp"
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--help -h"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                ocamllsp)
                    _dune_kc "$1" "$2" "$3"
                    return "$?"
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_mc() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            _dune_o "$2" "exec"
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--help -h"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                exec)
                    _dune_lc "$1" "$2" "$3"
                    return "$?"
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
_dune_nc() {
    local prev_word_was_named_argument_with_value=0
    local positional_argument_index=0
    while true; do
        if _dune_m; then
            return "$_dune_c"
        fi
        if _dune_l; then
            _dune_o "$2" "installed-libraries external-lib-deps build runtest fmt test clean install uninstall exec subst rules utop promote printenv help format-dune-file upgrade cache top ocaml-merlin shutdown diagnostics monitor ocaml coq describe show rpc internal init promotion pkg package tools"
            if [ "${#COMPREPLY[@]}" == "0" ]; then
                _dune_o "$2" "--help -h"
            fi
            return "$_dune_a"
        else
            local current_word status_
            current_word=$(_dune_j)
            status_=$?
            if [ "$status_" -ne 0 ]; then
                return "$status_"
            fi
            _dune_k
            if _dune_m; then
                return "$_dune_c"
            fi
            case "$current_word" in
                installed-libraries)
                    _dune_q "$1" "$2" "$3"
                    return "$?"
                    ;;
                external-lib-deps)
                    _dune_s "$1" "$2" "$3"
                    return "$?"
                    ;;
                build)
                    _dune_u "$1" "$2" "$3"
                    return "$?"
                    ;;
                runtest)
                    _dune_w "$1" "$2" "$3"
                    return "$?"
                    ;;
                fmt)
                    _dune_x "$1" "$2" "$3"
                    return "$?"
                    ;;
                test)
                    _dune_z "$1" "$2" "$3"
                    return "$?"
                    ;;
                clean)
                    _dune_A "$1" "$2" "$3"
                    return "$?"
                    ;;
                install)
                    _dune_C "$1" "$2" "$3"
                    return "$?"
                    ;;
                uninstall)
                    _dune_E "$1" "$2" "$3"
                    return "$?"
                    ;;
                exec)
                    _dune_G "$1" "$2" "$3"
                    return "$?"
                    ;;
                subst)
                    _dune_H "$1" "$2" "$3"
                    return "$?"
                    ;;
                rules)
                    _dune_J "$1" "$2" "$3"
                    return "$?"
                    ;;
                utop)
                    _dune_L "$1" "$2" "$3"
                    return "$?"
                    ;;
                promote)
                    _dune_N "$1" "$2" "$3"
                    return "$?"
                    ;;
                printenv)
                    _dune_P "$1" "$2" "$3"
                    return "$?"
                    ;;
                help)
                    _dune_R "$1" "$2" "$3"
                    return "$?"
                    ;;
                format-dune-file)
                    _dune_T "$1" "$2" "$3"
                    return "$?"
                    ;;
                upgrade)
                    _dune_U "$1" "$2" "$3"
                    return "$?"
                    ;;
                cache)
                    _dune_Y "$1" "$2" "$3"
                    return "$?"
                    ;;
                top)
                    _dune__a "$1" "$2" "$3"
                    return "$?"
                    ;;
                ocaml-merlin)
                    _dune_aa "$1" "$2" "$3"
                    return "$?"
                    ;;
                shutdown)
                    _dune_ba "$1" "$2" "$3"
                    return "$?"
                    ;;
                diagnostics)
                    _dune_ca "$1" "$2" "$3"
                    return "$?"
                    ;;
                monitor)
                    _dune_da "$1" "$2" "$3"
                    return "$?"
                    ;;
                ocaml)
                    _dune_sa "$1" "$2" "$3"
                    return "$?"
                    ;;
                coq)
                    _dune_va "$1" "$2" "$3"
                    return "$?"
                    ;;
                describe)
                    _dune_Ua "$1" "$2" "$3"
                    return "$?"
                    ;;
                show)
                    _dune_rb "$1" "$2" "$3"
                    return "$?"
                    ;;
                rpc)
                    _dune_wb "$1" "$2" "$3"
                    return "$?"
                    ;;
                internal)
                    _dune_Bb "$1" "$2" "$3"
                    return "$?"
                    ;;
                init)
                    _dune_Kb "$1" "$2" "$3"
                    return "$?"
                    ;;
                promotion)
                    _dune_Rb "$1" "$2" "$3"
                    return "$?"
                    ;;
                pkg)
                    _dune__c "$1" "$2" "$3"
                    return "$?"
                    ;;
                package)
                    _dune_ic "$1" "$2" "$3"
                    return "$?"
                    ;;
                tools)
                    _dune_mc "$1" "$2" "$3"
                    return "$?"
                    ;;
                -*)
                    prev_word_was_named_argument_with_value=0
                    ;;
                *)
                    if [ "$prev_word_was_named_argument_with_value" -eq 0 ]; then
                        positional_argument_index=$((positional_argument_index+1))
                    fi
                    prev_word_was_named_argument_with_value=0
                    ;;
            esac
        fi
    done
}
complete -F _dune_complete dune
